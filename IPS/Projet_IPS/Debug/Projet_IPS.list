
Projet_IPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fd8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08005178  08005178  00006178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005388  08005388  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005388  08005388  00006388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005390  08005390  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005390  08005390  00006390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005394  08005394  00006394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005398  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000060  080053f8  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  080053f8  00007310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6c5  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f7e  00000000  00000000  00015755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  000176d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a97  00000000  00000000  00018458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a95  00000000  00000000  00018eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9d8  00000000  00000000  00030984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a53a  00000000  00000000  0004035c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da896  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f4c  00000000  00000000  000da8dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  000de828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005160 	.word	0x08005160

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005160 	.word	0x08005160

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	@ 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2f>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000864:	bf24      	itt	cs
 8000866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800086a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800086e:	d90d      	bls.n	800088c <__aeabi_d2f+0x30>
 8000870:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800087c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000890:	d121      	bne.n	80008d6 <__aeabi_d2f+0x7a>
 8000892:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000896:	bfbc      	itt	lt
 8000898:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800089c:	4770      	bxlt	lr
 800089e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008a6:	f1c2 0218 	rsb	r2, r2, #24
 80008aa:	f1c2 0c20 	rsb	ip, r2, #32
 80008ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	bf18      	it	ne
 80008b8:	f040 0001 	orrne.w	r0, r0, #1
 80008bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c8:	ea40 000c 	orr.w	r0, r0, ip
 80008cc:	fa23 f302 	lsr.w	r3, r3, r2
 80008d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d4:	e7cc      	b.n	8000870 <__aeabi_d2f+0x14>
 80008d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008da:	d107      	bne.n	80008ec <__aeabi_d2f+0x90>
 80008dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e0:	bf1e      	ittt	ne
 80008e2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008e6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008ea:	4770      	bxne	lr
 80008ec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008f0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__aeabi_uldivmod>:
 80008fc:	b953      	cbnz	r3, 8000914 <__aeabi_uldivmod+0x18>
 80008fe:	b94a      	cbnz	r2, 8000914 <__aeabi_uldivmod+0x18>
 8000900:	2900      	cmp	r1, #0
 8000902:	bf08      	it	eq
 8000904:	2800      	cmpeq	r0, #0
 8000906:	bf1c      	itt	ne
 8000908:	f04f 31ff 	movne.w	r1, #4294967295
 800090c:	f04f 30ff 	movne.w	r0, #4294967295
 8000910:	f000 b96a 	b.w	8000be8 <__aeabi_idiv0>
 8000914:	f1ad 0c08 	sub.w	ip, sp, #8
 8000918:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800091c:	f000 f806 	bl	800092c <__udivmoddi4>
 8000920:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000928:	b004      	add	sp, #16
 800092a:	4770      	bx	lr

0800092c <__udivmoddi4>:
 800092c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000930:	9d08      	ldr	r5, [sp, #32]
 8000932:	460c      	mov	r4, r1
 8000934:	2b00      	cmp	r3, #0
 8000936:	d14e      	bne.n	80009d6 <__udivmoddi4+0xaa>
 8000938:	4694      	mov	ip, r2
 800093a:	458c      	cmp	ip, r1
 800093c:	4686      	mov	lr, r0
 800093e:	fab2 f282 	clz	r2, r2
 8000942:	d962      	bls.n	8000a0a <__udivmoddi4+0xde>
 8000944:	b14a      	cbz	r2, 800095a <__udivmoddi4+0x2e>
 8000946:	f1c2 0320 	rsb	r3, r2, #32
 800094a:	4091      	lsls	r1, r2
 800094c:	fa20 f303 	lsr.w	r3, r0, r3
 8000950:	fa0c fc02 	lsl.w	ip, ip, r2
 8000954:	4319      	orrs	r1, r3
 8000956:	fa00 fe02 	lsl.w	lr, r0, r2
 800095a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800095e:	fa1f f68c 	uxth.w	r6, ip
 8000962:	fbb1 f4f7 	udiv	r4, r1, r7
 8000966:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800096a:	fb07 1114 	mls	r1, r7, r4, r1
 800096e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000972:	fb04 f106 	mul.w	r1, r4, r6
 8000976:	4299      	cmp	r1, r3
 8000978:	d90a      	bls.n	8000990 <__udivmoddi4+0x64>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000982:	f080 8112 	bcs.w	8000baa <__udivmoddi4+0x27e>
 8000986:	4299      	cmp	r1, r3
 8000988:	f240 810f 	bls.w	8000baa <__udivmoddi4+0x27e>
 800098c:	3c02      	subs	r4, #2
 800098e:	4463      	add	r3, ip
 8000990:	1a59      	subs	r1, r3, r1
 8000992:	fa1f f38e 	uxth.w	r3, lr
 8000996:	fbb1 f0f7 	udiv	r0, r1, r7
 800099a:	fb07 1110 	mls	r1, r7, r0, r1
 800099e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009a2:	fb00 f606 	mul.w	r6, r0, r6
 80009a6:	429e      	cmp	r6, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x94>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80009b2:	f080 80fc 	bcs.w	8000bae <__udivmoddi4+0x282>
 80009b6:	429e      	cmp	r6, r3
 80009b8:	f240 80f9 	bls.w	8000bae <__udivmoddi4+0x282>
 80009bc:	4463      	add	r3, ip
 80009be:	3802      	subs	r0, #2
 80009c0:	1b9b      	subs	r3, r3, r6
 80009c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009c6:	2100      	movs	r1, #0
 80009c8:	b11d      	cbz	r5, 80009d2 <__udivmoddi4+0xa6>
 80009ca:	40d3      	lsrs	r3, r2
 80009cc:	2200      	movs	r2, #0
 80009ce:	e9c5 3200 	strd	r3, r2, [r5]
 80009d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d6:	428b      	cmp	r3, r1
 80009d8:	d905      	bls.n	80009e6 <__udivmoddi4+0xba>
 80009da:	b10d      	cbz	r5, 80009e0 <__udivmoddi4+0xb4>
 80009dc:	e9c5 0100 	strd	r0, r1, [r5]
 80009e0:	2100      	movs	r1, #0
 80009e2:	4608      	mov	r0, r1
 80009e4:	e7f5      	b.n	80009d2 <__udivmoddi4+0xa6>
 80009e6:	fab3 f183 	clz	r1, r3
 80009ea:	2900      	cmp	r1, #0
 80009ec:	d146      	bne.n	8000a7c <__udivmoddi4+0x150>
 80009ee:	42a3      	cmp	r3, r4
 80009f0:	d302      	bcc.n	80009f8 <__udivmoddi4+0xcc>
 80009f2:	4290      	cmp	r0, r2
 80009f4:	f0c0 80f0 	bcc.w	8000bd8 <__udivmoddi4+0x2ac>
 80009f8:	1a86      	subs	r6, r0, r2
 80009fa:	eb64 0303 	sbc.w	r3, r4, r3
 80009fe:	2001      	movs	r0, #1
 8000a00:	2d00      	cmp	r5, #0
 8000a02:	d0e6      	beq.n	80009d2 <__udivmoddi4+0xa6>
 8000a04:	e9c5 6300 	strd	r6, r3, [r5]
 8000a08:	e7e3      	b.n	80009d2 <__udivmoddi4+0xa6>
 8000a0a:	2a00      	cmp	r2, #0
 8000a0c:	f040 8090 	bne.w	8000b30 <__udivmoddi4+0x204>
 8000a10:	eba1 040c 	sub.w	r4, r1, ip
 8000a14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a26:	fb08 4416 	mls	r4, r8, r6, r4
 8000a2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a2e:	fb07 f006 	mul.w	r0, r7, r6
 8000a32:	4298      	cmp	r0, r3
 8000a34:	d908      	bls.n	8000a48 <__udivmoddi4+0x11c>
 8000a36:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a3e:	d202      	bcs.n	8000a46 <__udivmoddi4+0x11a>
 8000a40:	4298      	cmp	r0, r3
 8000a42:	f200 80cd 	bhi.w	8000be0 <__udivmoddi4+0x2b4>
 8000a46:	4626      	mov	r6, r4
 8000a48:	1a1c      	subs	r4, r3, r0
 8000a4a:	fa1f f38e 	uxth.w	r3, lr
 8000a4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a52:	fb08 4410 	mls	r4, r8, r0, r4
 8000a56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a5a:	fb00 f707 	mul.w	r7, r0, r7
 8000a5e:	429f      	cmp	r7, r3
 8000a60:	d908      	bls.n	8000a74 <__udivmoddi4+0x148>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a6a:	d202      	bcs.n	8000a72 <__udivmoddi4+0x146>
 8000a6c:	429f      	cmp	r7, r3
 8000a6e:	f200 80b0 	bhi.w	8000bd2 <__udivmoddi4+0x2a6>
 8000a72:	4620      	mov	r0, r4
 8000a74:	1bdb      	subs	r3, r3, r7
 8000a76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a7a:	e7a5      	b.n	80009c8 <__udivmoddi4+0x9c>
 8000a7c:	f1c1 0620 	rsb	r6, r1, #32
 8000a80:	408b      	lsls	r3, r1
 8000a82:	fa22 f706 	lsr.w	r7, r2, r6
 8000a86:	431f      	orrs	r7, r3
 8000a88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a90:	ea43 030c 	orr.w	r3, r3, ip
 8000a94:	40f4      	lsrs	r4, r6
 8000a96:	fa00 f801 	lsl.w	r8, r0, r1
 8000a9a:	0c38      	lsrs	r0, r7, #16
 8000a9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000aa0:	fbb4 fef0 	udiv	lr, r4, r0
 8000aa4:	fa1f fc87 	uxth.w	ip, r7
 8000aa8:	fb00 441e 	mls	r4, r0, lr, r4
 8000aac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ab0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ab4:	45a1      	cmp	r9, r4
 8000ab6:	fa02 f201 	lsl.w	r2, r2, r1
 8000aba:	d90a      	bls.n	8000ad2 <__udivmoddi4+0x1a6>
 8000abc:	193c      	adds	r4, r7, r4
 8000abe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ac2:	f080 8084 	bcs.w	8000bce <__udivmoddi4+0x2a2>
 8000ac6:	45a1      	cmp	r9, r4
 8000ac8:	f240 8081 	bls.w	8000bce <__udivmoddi4+0x2a2>
 8000acc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ad0:	443c      	add	r4, r7
 8000ad2:	eba4 0409 	sub.w	r4, r4, r9
 8000ad6:	fa1f f983 	uxth.w	r9, r3
 8000ada:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ade:	fb00 4413 	mls	r4, r0, r3, r4
 8000ae2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ae6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aea:	45a4      	cmp	ip, r4
 8000aec:	d907      	bls.n	8000afe <__udivmoddi4+0x1d2>
 8000aee:	193c      	adds	r4, r7, r4
 8000af0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000af4:	d267      	bcs.n	8000bc6 <__udivmoddi4+0x29a>
 8000af6:	45a4      	cmp	ip, r4
 8000af8:	d965      	bls.n	8000bc6 <__udivmoddi4+0x29a>
 8000afa:	3b02      	subs	r3, #2
 8000afc:	443c      	add	r4, r7
 8000afe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b02:	fba0 9302 	umull	r9, r3, r0, r2
 8000b06:	eba4 040c 	sub.w	r4, r4, ip
 8000b0a:	429c      	cmp	r4, r3
 8000b0c:	46ce      	mov	lr, r9
 8000b0e:	469c      	mov	ip, r3
 8000b10:	d351      	bcc.n	8000bb6 <__udivmoddi4+0x28a>
 8000b12:	d04e      	beq.n	8000bb2 <__udivmoddi4+0x286>
 8000b14:	b155      	cbz	r5, 8000b2c <__udivmoddi4+0x200>
 8000b16:	ebb8 030e 	subs.w	r3, r8, lr
 8000b1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b22:	40cb      	lsrs	r3, r1
 8000b24:	431e      	orrs	r6, r3
 8000b26:	40cc      	lsrs	r4, r1
 8000b28:	e9c5 6400 	strd	r6, r4, [r5]
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	e750      	b.n	80009d2 <__udivmoddi4+0xa6>
 8000b30:	f1c2 0320 	rsb	r3, r2, #32
 8000b34:	fa20 f103 	lsr.w	r1, r0, r3
 8000b38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b40:	4094      	lsls	r4, r2
 8000b42:	430c      	orrs	r4, r1
 8000b44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b4c:	fa1f f78c 	uxth.w	r7, ip
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3110 	mls	r1, r8, r0, r3
 8000b58:	0c23      	lsrs	r3, r4, #16
 8000b5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b5e:	fb00 f107 	mul.w	r1, r0, r7
 8000b62:	4299      	cmp	r1, r3
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0x24c>
 8000b66:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b6e:	d22c      	bcs.n	8000bca <__udivmoddi4+0x29e>
 8000b70:	4299      	cmp	r1, r3
 8000b72:	d92a      	bls.n	8000bca <__udivmoddi4+0x29e>
 8000b74:	3802      	subs	r0, #2
 8000b76:	4463      	add	r3, ip
 8000b78:	1a5b      	subs	r3, r3, r1
 8000b7a:	b2a4      	uxth	r4, r4
 8000b7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b80:	fb08 3311 	mls	r3, r8, r1, r3
 8000b84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b88:	fb01 f307 	mul.w	r3, r1, r7
 8000b8c:	42a3      	cmp	r3, r4
 8000b8e:	d908      	bls.n	8000ba2 <__udivmoddi4+0x276>
 8000b90:	eb1c 0404 	adds.w	r4, ip, r4
 8000b94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b98:	d213      	bcs.n	8000bc2 <__udivmoddi4+0x296>
 8000b9a:	42a3      	cmp	r3, r4
 8000b9c:	d911      	bls.n	8000bc2 <__udivmoddi4+0x296>
 8000b9e:	3902      	subs	r1, #2
 8000ba0:	4464      	add	r4, ip
 8000ba2:	1ae4      	subs	r4, r4, r3
 8000ba4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ba8:	e739      	b.n	8000a1e <__udivmoddi4+0xf2>
 8000baa:	4604      	mov	r4, r0
 8000bac:	e6f0      	b.n	8000990 <__udivmoddi4+0x64>
 8000bae:	4608      	mov	r0, r1
 8000bb0:	e706      	b.n	80009c0 <__udivmoddi4+0x94>
 8000bb2:	45c8      	cmp	r8, r9
 8000bb4:	d2ae      	bcs.n	8000b14 <__udivmoddi4+0x1e8>
 8000bb6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000bba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bbe:	3801      	subs	r0, #1
 8000bc0:	e7a8      	b.n	8000b14 <__udivmoddi4+0x1e8>
 8000bc2:	4631      	mov	r1, r6
 8000bc4:	e7ed      	b.n	8000ba2 <__udivmoddi4+0x276>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	e799      	b.n	8000afe <__udivmoddi4+0x1d2>
 8000bca:	4630      	mov	r0, r6
 8000bcc:	e7d4      	b.n	8000b78 <__udivmoddi4+0x24c>
 8000bce:	46d6      	mov	lr, sl
 8000bd0:	e77f      	b.n	8000ad2 <__udivmoddi4+0x1a6>
 8000bd2:	4463      	add	r3, ip
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	e74d      	b.n	8000a74 <__udivmoddi4+0x148>
 8000bd8:	4606      	mov	r6, r0
 8000bda:	4623      	mov	r3, r4
 8000bdc:	4608      	mov	r0, r1
 8000bde:	e70f      	b.n	8000a00 <__udivmoddi4+0xd4>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	e730      	b.n	8000a48 <__udivmoddi4+0x11c>
 8000be6:	bf00      	nop

08000be8 <__aeabi_idiv0>:
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	0000      	movs	r0, r0
	...

08000bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf0:	b5b0      	push	{r4, r5, r7, lr}
 8000bf2:	b090      	sub	sp, #64	@ 0x40
 8000bf4:	af06      	add	r7, sp, #24
  /* MCU Configuration */
  HAL_Init();
 8000bf6:	f000 fe99 	bl	800192c <HAL_Init>
  SystemClock_Config();
 8000bfa:	f000 fb81 	bl	8001300 <SystemClock_Config>

  /* Initialize peripherals */
  MX_GPIO_Init();
 8000bfe:	f000 fcbb 	bl	8001578 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c02:	f000 fbe7 	bl	80013d4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000c06:	f000 fc8d 	bl	8001524 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000c0a:	f000 fc35 	bl	8001478 <MX_TIM2_Init>

  /* Start PWM for servo on PA1 (TIM2_CH2) */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000c0e:	2104      	movs	r1, #4
 8000c10:	4845      	ldr	r0, [pc, #276]	@ (8000d28 <main+0x138>)
 8000c12:	f002 fbe3 	bl	80033dc <HAL_TIM_PWM_Start>

  /* Start UART reception */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)txBufReceive, 1);
 8000c16:	2201      	movs	r2, #1
 8000c18:	4944      	ldr	r1, [pc, #272]	@ (8000d2c <main+0x13c>)
 8000c1a:	4845      	ldr	r0, [pc, #276]	@ (8000d30 <main+0x140>)
 8000c1c:	f003 fa71 	bl	8004102 <HAL_UART_Receive_IT>
  int voltage_integer, mass_integer, force_integer, automatic_angle;
  float pwm_duty_cycle;
  uint16_t raw_adc_value;

  /* Message de démarrage */
  strcpy(uart_message, "=== Systeme demarre - Mode diagnostic ===\r\n");
 8000c20:	4a44      	ldr	r2, [pc, #272]	@ (8000d34 <main+0x144>)
 8000c22:	4b45      	ldr	r3, [pc, #276]	@ (8000d38 <main+0x148>)
 8000c24:	4614      	mov	r4, r2
 8000c26:	461d      	mov	r5, r3
 8000c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);
 8000c38:	483e      	ldr	r0, [pc, #248]	@ (8000d34 <main+0x144>)
 8000c3a:	f7ff fad1 	bl	80001e0 <strlen>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	493b      	ldr	r1, [pc, #236]	@ (8000d34 <main+0x144>)
 8000c48:	4839      	ldr	r0, [pc, #228]	@ (8000d30 <main+0x140>)
 8000c4a:	f003 f9cf 	bl	8003fec <HAL_UART_Transmit>

  /* Configuration forcée et test du timer */
  sprintf(uart_message, "Valeur TIM2->CCR2 initiale: %lu\r\n", (unsigned long)TIM2->CCR2);
 8000c4e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c54:	461a      	mov	r2, r3
 8000c56:	4939      	ldr	r1, [pc, #228]	@ (8000d3c <main+0x14c>)
 8000c58:	4836      	ldr	r0, [pc, #216]	@ (8000d34 <main+0x144>)
 8000c5a:	f003 fde1 	bl	8004820 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);
 8000c5e:	4835      	ldr	r0, [pc, #212]	@ (8000d34 <main+0x144>)
 8000c60:	f7ff fabe 	bl	80001e0 <strlen>
 8000c64:	4603      	mov	r3, r0
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6c:	4931      	ldr	r1, [pc, #196]	@ (8000d34 <main+0x144>)
 8000c6e:	4830      	ldr	r0, [pc, #192]	@ (8000d30 <main+0x140>)
 8000c70:	f003 f9bc 	bl	8003fec <HAL_UART_Transmit>

  // Arrêt puis redémarrage du timer pour s'assurer qu'il est correctement configuré
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8000c74:	2104      	movs	r1, #4
 8000c76:	482c      	ldr	r0, [pc, #176]	@ (8000d28 <main+0x138>)
 8000c78:	f002 fc60 	bl	800353c <HAL_TIM_PWM_Stop>
  HAL_Delay(10);
 8000c7c:	200a      	movs	r0, #10
 8000c7e:	f000 fec7 	bl	8001a10 <HAL_Delay>

  // Configuration manuelle des registres pour être certain
  TIM2->PSC = 41;      // Prescaler: 84MHz/42 = 2MHz
 8000c82:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c86:	2229      	movs	r2, #41	@ 0x29
 8000c88:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM2->ARR = 19999;   // Auto-reload: 2MHz/20000 = 50Hz
 8000c8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c8e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000c92:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM2->CCR2 = 1500;   // Position initiale: 90°
 8000c94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c98:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000c9c:	639a      	str	r2, [r3, #56]	@ 0x38

  sprintf(uart_message, "Config manuelle: PSC=%lu, ARR=%lu, CCR2=%lu\r\n",
         (unsigned long)TIM2->PSC, (unsigned long)TIM2->ARR, (unsigned long)TIM2->CCR2);
 8000c9e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ca2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000ca4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ca8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000caa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  sprintf(uart_message, "Config manuelle: PSC=%lu, ARR=%lu, CCR2=%lu\r\n",
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	4922      	ldr	r1, [pc, #136]	@ (8000d40 <main+0x150>)
 8000cb6:	481f      	ldr	r0, [pc, #124]	@ (8000d34 <main+0x144>)
 8000cb8:	f003 fdb2 	bl	8004820 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);
 8000cbc:	481d      	ldr	r0, [pc, #116]	@ (8000d34 <main+0x144>)
 8000cbe:	f7ff fa8f 	bl	80001e0 <strlen>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cca:	491a      	ldr	r1, [pc, #104]	@ (8000d34 <main+0x144>)
 8000ccc:	4818      	ldr	r0, [pc, #96]	@ (8000d30 <main+0x140>)
 8000cce:	f003 f98d 	bl	8003fec <HAL_UART_Transmit>

  // Activation du timer
  TIM2->CCER |= TIM_CCER_CC2E;  // Active la sortie du canal 2
 8000cd2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cd6:	6a1b      	ldr	r3, [r3, #32]
 8000cd8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cdc:	f043 0310 	orr.w	r3, r3, #16
 8000ce0:	6213      	str	r3, [r2, #32]
  TIM2->CR1 |= TIM_CR1_CEN;     // Active le timer
 8000ce2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6013      	str	r3, [r2, #0]

  // Test du servo avec positions fixes
  strcpy(uart_message, "=== Test des positions du servomoteur ===\r\n");
 8000cf2:	4a10      	ldr	r2, [pc, #64]	@ (8000d34 <main+0x144>)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <main+0x154>)
 8000cf6:	4614      	mov	r4, r2
 8000cf8:	461d      	mov	r5, r3
 8000cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);
 8000d0a:	480a      	ldr	r0, [pc, #40]	@ (8000d34 <main+0x144>)
 8000d0c:	f7ff fa68 	bl	80001e0 <strlen>
 8000d10:	4603      	mov	r3, r0
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295
 8000d18:	4906      	ldr	r1, [pc, #24]	@ (8000d34 <main+0x144>)
 8000d1a:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <main+0x140>)
 8000d1c:	f003 f966 	bl	8003fec <HAL_UART_Transmit>

  for(int test_pos = 1000; test_pos <= 2000; test_pos += 200) {
 8000d20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d26:	e02d      	b.n	8000d84 <main+0x194>
 8000d28:	20000130 	.word	0x20000130
 8000d2c:	2000007c 	.word	0x2000007c
 8000d30:	20000178 	.word	0x20000178
 8000d34:	20000084 	.word	0x20000084
 8000d38:	08005178 	.word	0x08005178
 8000d3c:	080051a4 	.word	0x080051a4
 8000d40:	080051c8 	.word	0x080051c8
 8000d44:	080051f8 	.word	0x080051f8
      TIM2->CCR2 = test_pos;
 8000d48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4e:	6393      	str	r3, [r2, #56]	@ 0x38

      sprintf(uart_message, "Position test: %d (CCR2=%lu)\r\n",
              test_pos, (unsigned long)TIM2->CCR2);
 8000d50:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      sprintf(uart_message, "Position test: %d (CCR2=%lu)\r\n",
 8000d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d58:	4993      	ldr	r1, [pc, #588]	@ (8000fa8 <main+0x3b8>)
 8000d5a:	4894      	ldr	r0, [pc, #592]	@ (8000fac <main+0x3bc>)
 8000d5c:	f003 fd60 	bl	8004820 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);
 8000d60:	4892      	ldr	r0, [pc, #584]	@ (8000fac <main+0x3bc>)
 8000d62:	f7ff fa3d 	bl	80001e0 <strlen>
 8000d66:	4603      	mov	r3, r0
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	498f      	ldr	r1, [pc, #572]	@ (8000fac <main+0x3bc>)
 8000d70:	488f      	ldr	r0, [pc, #572]	@ (8000fb0 <main+0x3c0>)
 8000d72:	f003 f93b 	bl	8003fec <HAL_UART_Transmit>

      HAL_Delay(1000);
 8000d76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d7a:	f000 fe49 	bl	8001a10 <HAL_Delay>
  for(int test_pos = 1000; test_pos <= 2000; test_pos += 200) {
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d80:	33c8      	adds	r3, #200	@ 0xc8
 8000d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d86:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000d8a:	dddd      	ble.n	8000d48 <main+0x158>
  }

  // Position centrale
  TIM2->CCR2 = 1500;
 8000d8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d90:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000d94:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_Delay(1000);
 8000d96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d9a:	f000 fe39 	bl	8001a10 <HAL_Delay>

  /* Main loop */
  while (1) {
      /* Acquisition de la tension avec moyennage */
      raw_adc_value = get_averaged_adc_reading();
 8000d9e:	f000 f9b5 	bl	800110c <get_averaged_adc_reading>
 8000da2:	4603      	mov	r3, r0
 8000da4:	847b      	strh	r3, [r7, #34]	@ 0x22

      /* Conversion en volts (0-3.3V) */
      sensor_voltage = ((float)raw_adc_value * 3.3f) / 4095.0f;
 8000da6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000da8:	ee07 3a90 	vmov	s15, r3
 8000dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000db0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8000fb4 <main+0x3c4>
 8000db4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000db8:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8000fb8 <main+0x3c8>
 8000dbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dc0:	edc7 7a07 	vstr	s15, [r7, #28]

      /* Messages de diagnostic détaillés */
      sprintf(uart_message, "DIAG: Raw ADC=%d, Voltage=%d.%03d V\r\n",
 8000dc4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000dc6:	edd7 7a07 	vldr	s15, [r7, #28]
 8000dca:	eefd 6ae7 	vcvt.s32.f32	s13, s15
              raw_adc_value, (int)sensor_voltage, (int)((sensor_voltage-(int)sensor_voltage)*1000));
 8000dce:	edd7 7a07 	vldr	s15, [r7, #28]
 8000dd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dda:	ed97 7a07 	vldr	s14, [r7, #28]
 8000dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000de2:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8000fbc <main+0x3cc>
 8000de6:	ee67 7a87 	vmul.f32	s15, s15, s14
      sprintf(uart_message, "DIAG: Raw ADC=%d, Voltage=%d.%03d V\r\n",
 8000dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dee:	ee17 3a90 	vmov	r3, s15
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	ee16 3a90 	vmov	r3, s13
 8000df8:	4971      	ldr	r1, [pc, #452]	@ (8000fc0 <main+0x3d0>)
 8000dfa:	486c      	ldr	r0, [pc, #432]	@ (8000fac <main+0x3bc>)
 8000dfc:	f003 fd10 	bl	8004820 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);
 8000e00:	486a      	ldr	r0, [pc, #424]	@ (8000fac <main+0x3bc>)
 8000e02:	f7ff f9ed 	bl	80001e0 <strlen>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	4967      	ldr	r1, [pc, #412]	@ (8000fac <main+0x3bc>)
 8000e10:	4867      	ldr	r0, [pc, #412]	@ (8000fb0 <main+0x3c0>)
 8000e12:	f003 f8eb 	bl	8003fec <HAL_UART_Transmit>

      /* Calcul de la masse à partir de la tension */
      calculated_mass = convert_voltage_to_weight(sensor_voltage);
 8000e16:	ed97 0a07 	vldr	s0, [r7, #28]
 8000e1a:	f000 f9a3 	bl	8001164 <convert_voltage_to_weight>
 8000e1e:	ed87 0a06 	vstr	s0, [r7, #24]

      /* Calcul de la force */
      applied_force = (calculated_mass * 0.001f) * GRAVITY_CONSTANT;
 8000e22:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e26:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8000fc4 <main+0x3d4>
 8000e2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e2e:	ee17 0a90 	vmov	r0, s15
 8000e32:	f7ff fcbb 	bl	80007ac <__aeabi_f2d>
 8000e36:	a35a      	add	r3, pc, #360	@ (adr r3, 8000fa0 <main+0x3b0>)
 8000e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3c:	f7ff fa28 	bl	8000290 <__aeabi_dmul>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4610      	mov	r0, r2
 8000e46:	4619      	mov	r1, r3
 8000e48:	f7ff fd08 	bl	800085c <__aeabi_d2f>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	617b      	str	r3, [r7, #20]

      /* Envoi des données à l'IHM en format entier */
      voltage_integer = (int)(sensor_voltage * 1000);
 8000e50:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e54:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8000fbc <main+0x3cc>
 8000e58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e60:	ee17 3a90 	vmov	r3, s15
 8000e64:	613b      	str	r3, [r7, #16]
      mass_integer = (int)calculated_mass;
 8000e66:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e6e:	ee17 3a90 	vmov	r3, s15
 8000e72:	60fb      	str	r3, [r7, #12]
      force_integer = (int)(applied_force * 1000);
 8000e74:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e78:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8000fbc <main+0x3cc>
 8000e7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e84:	ee17 3a90 	vmov	r3, s15
 8000e88:	60bb      	str	r3, [r7, #8]

      /* Message principal */
      sprintf(uart_message, "V:%d.%03d\r\nM:%d\r\nF:%d.%03d\r\n",
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4a4e      	ldr	r2, [pc, #312]	@ (8000fc8 <main+0x3d8>)
 8000e8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e92:	1192      	asrs	r2, r2, #6
 8000e94:	17db      	asrs	r3, r3, #31
 8000e96:	1ad5      	subs	r5, r2, r3
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4a4b      	ldr	r2, [pc, #300]	@ (8000fc8 <main+0x3d8>)
 8000e9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea0:	1191      	asrs	r1, r2, #6
 8000ea2:	17da      	asrs	r2, r3, #31
 8000ea4:	1a89      	subs	r1, r1, r2
 8000ea6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000eaa:	fb01 f202 	mul.w	r2, r1, r2
 8000eae:	1a99      	subs	r1, r3, r2
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	4a45      	ldr	r2, [pc, #276]	@ (8000fc8 <main+0x3d8>)
 8000eb4:	fb82 0203 	smull	r0, r2, r2, r3
 8000eb8:	1192      	asrs	r2, r2, #6
 8000eba:	17db      	asrs	r3, r3, #31
 8000ebc:	1ad0      	subs	r0, r2, r3
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	4b41      	ldr	r3, [pc, #260]	@ (8000fc8 <main+0x3d8>)
 8000ec2:	fb83 4302 	smull	r4, r3, r3, r2
 8000ec6:	119c      	asrs	r4, r3, #6
 8000ec8:	17d3      	asrs	r3, r2, #31
 8000eca:	1ae3      	subs	r3, r4, r3
 8000ecc:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8000ed0:	fb04 f303 	mul.w	r3, r4, r3
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	9302      	str	r3, [sp, #8]
 8000ed8:	9001      	str	r0, [sp, #4]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	462a      	mov	r2, r5
 8000ee2:	493a      	ldr	r1, [pc, #232]	@ (8000fcc <main+0x3dc>)
 8000ee4:	4831      	ldr	r0, [pc, #196]	@ (8000fac <main+0x3bc>)
 8000ee6:	f003 fc9b 	bl	8004820 <siprintf>
              voltage_integer/1000, voltage_integer%1000, mass_integer, force_integer/1000, force_integer%1000);
      HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);
 8000eea:	4830      	ldr	r0, [pc, #192]	@ (8000fac <main+0x3bc>)
 8000eec:	f7ff f978 	bl	80001e0 <strlen>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef8:	492c      	ldr	r1, [pc, #176]	@ (8000fac <main+0x3bc>)
 8000efa:	482d      	ldr	r0, [pc, #180]	@ (8000fb0 <main+0x3c0>)
 8000efc:	f003 f876 	bl	8003fec <HAL_UART_Transmit>

      /* Contrôle du servomoteur */
      if (operation_mode == 1) {  // Mode manuel
 8000f00:	4b33      	ldr	r3, [pc, #204]	@ (8000fd0 <main+0x3e0>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d16d      	bne.n	8000fe4 <main+0x3f4>
          pwm_duty_cycle = convert_angle_to_pwm(servo_position);
 8000f08:	4b32      	ldr	r3, [pc, #200]	@ (8000fd4 <main+0x3e4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 f9c5 	bl	800129c <convert_angle_to_pwm>
 8000f12:	ed87 0a00 	vstr	s0, [r7]
          TIM2->CCR2 = (uint32_t)pwm_duty_cycle;  // Mise à jour directe du registre
 8000f16:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f1a:	edd7 7a00 	vldr	s15, [r7]
 8000f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f22:	ee17 2a90 	vmov	r2, s15
 8000f26:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Valeur CCR2 après mise à jour */
          sprintf(uart_message, "CCR2 après mise à jour: %lu\r\n", (unsigned long)TIM2->CCR2);
 8000f28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4929      	ldr	r1, [pc, #164]	@ (8000fd8 <main+0x3e8>)
 8000f32:	481e      	ldr	r0, [pc, #120]	@ (8000fac <main+0x3bc>)
 8000f34:	f003 fc74 	bl	8004820 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);
 8000f38:	481c      	ldr	r0, [pc, #112]	@ (8000fac <main+0x3bc>)
 8000f3a:	f7ff f951 	bl	80001e0 <strlen>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	4919      	ldr	r1, [pc, #100]	@ (8000fac <main+0x3bc>)
 8000f48:	4819      	ldr	r0, [pc, #100]	@ (8000fb0 <main+0x3c0>)
 8000f4a:	f003 f84f 	bl	8003fec <HAL_UART_Transmit>

          /* Envoi de l'angle actuel pour l'IHM */
          sprintf(uart_message, "A:%d\r\n", servo_position);
 8000f4e:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <main+0x3e4>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	4921      	ldr	r1, [pc, #132]	@ (8000fdc <main+0x3ec>)
 8000f56:	4815      	ldr	r0, [pc, #84]	@ (8000fac <main+0x3bc>)
 8000f58:	f003 fc62 	bl	8004820 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);
 8000f5c:	4813      	ldr	r0, [pc, #76]	@ (8000fac <main+0x3bc>)
 8000f5e:	f7ff f93f 	bl	80001e0 <strlen>
 8000f62:	4603      	mov	r3, r0
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	4910      	ldr	r1, [pc, #64]	@ (8000fac <main+0x3bc>)
 8000f6c:	4810      	ldr	r0, [pc, #64]	@ (8000fb0 <main+0x3c0>)
 8000f6e:	f003 f83d 	bl	8003fec <HAL_UART_Transmit>

          /* Message détaillé pour le mode manuel */
          sprintf(uart_message, "SERVO MANUEL: Angle=%d, CCR=%lu\r\n",
 8000f72:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <main+0x3e4>)
 8000f74:	681a      	ldr	r2, [r3, #0]
                  servo_position, (unsigned long)TIM2->CCR2);
 8000f76:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          sprintf(uart_message, "SERVO MANUEL: Angle=%d, CCR=%lu\r\n",
 8000f7c:	4918      	ldr	r1, [pc, #96]	@ (8000fe0 <main+0x3f0>)
 8000f7e:	480b      	ldr	r0, [pc, #44]	@ (8000fac <main+0x3bc>)
 8000f80:	f003 fc4e 	bl	8004820 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);
 8000f84:	4809      	ldr	r0, [pc, #36]	@ (8000fac <main+0x3bc>)
 8000f86:	f7ff f92b 	bl	80001e0 <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f92:	4906      	ldr	r1, [pc, #24]	@ (8000fac <main+0x3bc>)
 8000f94:	4806      	ldr	r0, [pc, #24]	@ (8000fb0 <main+0x3c0>)
 8000f96:	f003 f829 	bl	8003fec <HAL_UART_Transmit>
 8000f9a:	e09e      	b.n	80010da <main+0x4ea>
 8000f9c:	f3af 8000 	nop.w
 8000fa0:	51eb851f 	.word	0x51eb851f
 8000fa4:	40239eb8 	.word	0x40239eb8
 8000fa8:	08005224 	.word	0x08005224
 8000fac:	20000084 	.word	0x20000084
 8000fb0:	20000178 	.word	0x20000178
 8000fb4:	40533333 	.word	0x40533333
 8000fb8:	457ff000 	.word	0x457ff000
 8000fbc:	447a0000 	.word	0x447a0000
 8000fc0:	08005244 	.word	0x08005244
 8000fc4:	3a83126f 	.word	0x3a83126f
 8000fc8:	10624dd3 	.word	0x10624dd3
 8000fcc:	0800526c 	.word	0x0800526c
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000080 	.word	0x20000080
 8000fd8:	0800528c 	.word	0x0800528c
 8000fdc:	080052ac 	.word	0x080052ac
 8000fe0:	080052b4 	.word	0x080052b4
      }
      else if (operation_mode == 2) {  // Mode automatique
 8000fe4:	4b41      	ldr	r3, [pc, #260]	@ (80010ec <main+0x4fc>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d176      	bne.n	80010da <main+0x4ea>
          automatic_angle = convert_force_to_servo_angle(applied_force);
 8000fec:	ed97 0a05 	vldr	s0, [r7, #20]
 8000ff0:	f000 f90a 	bl	8001208 <convert_force_to_servo_angle>
 8000ff4:	6078      	str	r0, [r7, #4]
          pwm_duty_cycle = convert_angle_to_pwm(automatic_angle);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 f950 	bl	800129c <convert_angle_to_pwm>
 8000ffc:	ed87 0a00 	vstr	s0, [r7]
          TIM2->CCR2 = (uint32_t)pwm_duty_cycle;  // Mise à jour directe du registre
 8001000:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001004:	edd7 7a00 	vldr	s15, [r7]
 8001008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800100c:	ee17 2a90 	vmov	r2, s15
 8001010:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Valeur CCR2 après mise à jour */
          sprintf(uart_message, "CCR2 après mise à jour: %lu\r\n", (unsigned long)TIM2->CCR2);
 8001012:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001018:	461a      	mov	r2, r3
 800101a:	4935      	ldr	r1, [pc, #212]	@ (80010f0 <main+0x500>)
 800101c:	4835      	ldr	r0, [pc, #212]	@ (80010f4 <main+0x504>)
 800101e:	f003 fbff 	bl	8004820 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);
 8001022:	4834      	ldr	r0, [pc, #208]	@ (80010f4 <main+0x504>)
 8001024:	f7ff f8dc 	bl	80001e0 <strlen>
 8001028:	4603      	mov	r3, r0
 800102a:	b29a      	uxth	r2, r3
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
 8001030:	4930      	ldr	r1, [pc, #192]	@ (80010f4 <main+0x504>)
 8001032:	4831      	ldr	r0, [pc, #196]	@ (80010f8 <main+0x508>)
 8001034:	f002 ffda 	bl	8003fec <HAL_UART_Transmit>

          /* Envoi de l'angle calculé pour l'IHM */
          sprintf(uart_message, "A:%d\r\n", automatic_angle);
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	4930      	ldr	r1, [pc, #192]	@ (80010fc <main+0x50c>)
 800103c:	482d      	ldr	r0, [pc, #180]	@ (80010f4 <main+0x504>)
 800103e:	f003 fbef 	bl	8004820 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);
 8001042:	482c      	ldr	r0, [pc, #176]	@ (80010f4 <main+0x504>)
 8001044:	f7ff f8cc 	bl	80001e0 <strlen>
 8001048:	4603      	mov	r3, r0
 800104a:	b29a      	uxth	r2, r3
 800104c:	f04f 33ff 	mov.w	r3, #4294967295
 8001050:	4928      	ldr	r1, [pc, #160]	@ (80010f4 <main+0x504>)
 8001052:	4829      	ldr	r0, [pc, #164]	@ (80010f8 <main+0x508>)
 8001054:	f002 ffca 	bl	8003fec <HAL_UART_Transmit>

          /* Message de débogage supplémentaire */
          sprintf(uart_message, "SERVO AUTO: V=%d.%03d M=%d F=%d.%03d A=%d CCR=%lu\r\n",
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4a29      	ldr	r2, [pc, #164]	@ (8001100 <main+0x510>)
 800105c:	fb82 1203 	smull	r1, r2, r2, r3
 8001060:	1192      	asrs	r2, r2, #6
 8001062:	17db      	asrs	r3, r3, #31
 8001064:	1ad5      	subs	r5, r2, r3
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4a25      	ldr	r2, [pc, #148]	@ (8001100 <main+0x510>)
 800106a:	fb82 1203 	smull	r1, r2, r2, r3
 800106e:	1191      	asrs	r1, r2, #6
 8001070:	17da      	asrs	r2, r3, #31
 8001072:	1a89      	subs	r1, r1, r2
 8001074:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001078:	fb01 f202 	mul.w	r2, r1, r2
 800107c:	1a99      	subs	r1, r3, r2
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	4a1f      	ldr	r2, [pc, #124]	@ (8001100 <main+0x510>)
 8001082:	fb82 0203 	smull	r0, r2, r2, r3
 8001086:	1192      	asrs	r2, r2, #6
 8001088:	17db      	asrs	r3, r3, #31
 800108a:	1ad0      	subs	r0, r2, r3
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	4b1c      	ldr	r3, [pc, #112]	@ (8001100 <main+0x510>)
 8001090:	fb83 4302 	smull	r4, r3, r3, r2
 8001094:	119c      	asrs	r4, r3, #6
 8001096:	17d3      	asrs	r3, r2, #31
 8001098:	1ae3      	subs	r3, r4, r3
 800109a:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800109e:	fb04 f303 	mul.w	r3, r4, r3
 80010a2:	1ad3      	subs	r3, r2, r3
                 voltage_integer/1000, voltage_integer%1000, mass_integer, force_integer/1000, force_integer%1000,
                 automatic_angle, (unsigned long)TIM2->CCR2);
 80010a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010a8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
          sprintf(uart_message, "SERVO AUTO: V=%d.%03d M=%d F=%d.%03d A=%d CCR=%lu\r\n",
 80010aa:	9204      	str	r2, [sp, #16]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	9203      	str	r2, [sp, #12]
 80010b0:	9302      	str	r3, [sp, #8]
 80010b2:	9001      	str	r0, [sp, #4]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	460b      	mov	r3, r1
 80010ba:	462a      	mov	r2, r5
 80010bc:	4911      	ldr	r1, [pc, #68]	@ (8001104 <main+0x514>)
 80010be:	480d      	ldr	r0, [pc, #52]	@ (80010f4 <main+0x504>)
 80010c0:	f003 fbae 	bl	8004820 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);
 80010c4:	480b      	ldr	r0, [pc, #44]	@ (80010f4 <main+0x504>)
 80010c6:	f7ff f88b 	bl	80001e0 <strlen>
 80010ca:	4603      	mov	r3, r0
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	4908      	ldr	r1, [pc, #32]	@ (80010f4 <main+0x504>)
 80010d4:	4808      	ldr	r0, [pc, #32]	@ (80010f8 <main+0x508>)
 80010d6:	f002 ff89 	bl	8003fec <HAL_UART_Transmit>
      }

      /* Clignotement de la LED pour indiquer que le programme tourne */
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80010da:	2120      	movs	r1, #32
 80010dc:	480a      	ldr	r0, [pc, #40]	@ (8001108 <main+0x518>)
 80010de:	f001 fc7b 	bl	80029d8 <HAL_GPIO_TogglePin>

      /* Délai entre les mesures */
      HAL_Delay(500);  // Réduit à 500ms pour un diagnostic plus rapide
 80010e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010e6:	f000 fc93 	bl	8001a10 <HAL_Delay>
      raw_adc_value = get_averaged_adc_reading();
 80010ea:	e658      	b.n	8000d9e <main+0x1ae>
 80010ec:	20000000 	.word	0x20000000
 80010f0:	0800528c 	.word	0x0800528c
 80010f4:	20000084 	.word	0x20000084
 80010f8:	20000178 	.word	0x20000178
 80010fc:	080052ac 	.word	0x080052ac
 8001100:	10624dd3 	.word	0x10624dd3
 8001104:	080052d8 	.word	0x080052d8
 8001108:	40020000 	.word	0x40020000

0800110c <get_averaged_adc_reading>:

/**
 * @brief Moyenne plusieurs lectures ADC pour réduire le bruit
 * @return Valeur ADC moyennée
 */
uint16_t get_averaged_adc_reading(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
    uint32_t sum = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
    uint16_t i;

    for(i = 0; i < AVERAGING_SAMPLES; i++) {
 8001116:	2300      	movs	r3, #0
 8001118:	807b      	strh	r3, [r7, #2]
 800111a:	e016      	b.n	800114a <get_averaged_adc_reading+0x3e>
        HAL_ADC_Start(&hadc1);
 800111c:	4810      	ldr	r0, [pc, #64]	@ (8001160 <get_averaged_adc_reading+0x54>)
 800111e:	f000 fcdf 	bl	8001ae0 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 10);
 8001122:	210a      	movs	r1, #10
 8001124:	480e      	ldr	r0, [pc, #56]	@ (8001160 <get_averaged_adc_reading+0x54>)
 8001126:	f000 fdc2 	bl	8001cae <HAL_ADC_PollForConversion>
        sum += HAL_ADC_GetValue(&hadc1);
 800112a:	480d      	ldr	r0, [pc, #52]	@ (8001160 <get_averaged_adc_reading+0x54>)
 800112c:	f000 ff5a 	bl	8001fe4 <HAL_ADC_GetValue>
 8001130:	4602      	mov	r2, r0
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	607b      	str	r3, [r7, #4]
        HAL_ADC_Stop(&hadc1);
 8001138:	4809      	ldr	r0, [pc, #36]	@ (8001160 <get_averaged_adc_reading+0x54>)
 800113a:	f000 fd85 	bl	8001c48 <HAL_ADC_Stop>
        HAL_Delay(1);  // Petit délai entre les mesures
 800113e:	2001      	movs	r0, #1
 8001140:	f000 fc66 	bl	8001a10 <HAL_Delay>
    for(i = 0; i < AVERAGING_SAMPLES; i++) {
 8001144:	887b      	ldrh	r3, [r7, #2]
 8001146:	3301      	adds	r3, #1
 8001148:	807b      	strh	r3, [r7, #2]
 800114a:	887b      	ldrh	r3, [r7, #2]
 800114c:	2b0f      	cmp	r3, #15
 800114e:	d9e5      	bls.n	800111c <get_averaged_adc_reading+0x10>
    }

    return (uint16_t)(sum / AVERAGING_SAMPLES);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	091b      	lsrs	r3, r3, #4
 8001154:	b29b      	uxth	r3, r3
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200000e8 	.word	0x200000e8

08001164 <convert_voltage_to_weight>:
/**
 * @brief Calcule la masse à partir de la tension mesurée
 * @param input_voltage Tension mesurée en Volts
 * @return Masse calculée en grammes
 */
float convert_voltage_to_weight(float input_voltage) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b094      	sub	sp, #80	@ 0x50
 8001168:	af02      	add	r7, sp, #8
 800116a:	ed87 0a01 	vstr	s0, [r7, #4]
    float weight_result;
    float conversion_factor = 188.68f;
 800116e:	4b22      	ldr	r3, [pc, #136]	@ (80011f8 <convert_voltage_to_weight+0x94>)
 8001170:	647b      	str	r3, [r7, #68]	@ 0x44
    weight_result = conversion_factor * input_voltage;
 8001172:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001176:	edd7 7a01 	vldr	s15, [r7, #4]
 800117a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    char debug[50];

    sprintf(debug, "CONV: %d.%03d V -> %d g\r\n",
 8001182:	edd7 7a01 	vldr	s15, [r7, #4]
 8001186:	eefd 6ae7 	vcvt.s32.f32	s13, s15
            (int)input_voltage, (int)((input_voltage-(int)input_voltage)*1000), (int)weight_result);
 800118a:	edd7 7a01 	vldr	s15, [r7, #4]
 800118e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001196:	ed97 7a01 	vldr	s14, [r7, #4]
 800119a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800119e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80011fc <convert_voltage_to_weight+0x98>
 80011a2:	ee67 7a87 	vmul.f32	s15, s15, s14
    sprintf(debug, "CONV: %d.%03d V -> %d g\r\n",
 80011a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80011aa:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80011ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b2:	ee17 3a90 	vmov	r3, s15
 80011b6:	f107 000c 	add.w	r0, r7, #12
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	ee17 3a10 	vmov	r3, s14
 80011c0:	ee16 2a90 	vmov	r2, s13
 80011c4:	490e      	ldr	r1, [pc, #56]	@ (8001200 <convert_voltage_to_weight+0x9c>)
 80011c6:	f003 fb2b 	bl	8004820 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)debug, strlen(debug), HAL_MAX_DELAY);
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f806 	bl	80001e0 <strlen>
 80011d4:	4603      	mov	r3, r0
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	f107 010c 	add.w	r1, r7, #12
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295
 80011e0:	4808      	ldr	r0, [pc, #32]	@ (8001204 <convert_voltage_to_weight+0xa0>)
 80011e2:	f002 ff03 	bl	8003fec <HAL_UART_Transmit>

    return weight_result;
 80011e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011e8:	ee07 3a90 	vmov	s15, r3
}
 80011ec:	eeb0 0a67 	vmov.f32	s0, s15
 80011f0:	3748      	adds	r7, #72	@ 0x48
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	433cae14 	.word	0x433cae14
 80011fc:	447a0000 	.word	0x447a0000
 8001200:	0800530c 	.word	0x0800530c
 8001204:	20000178 	.word	0x20000178

08001208 <convert_force_to_servo_angle>:
/**
 * @brief Convertit une force en angle pour le servomoteur
 * @param applied_force Force en Newtons
 * @return Angle correspondant (0-180°)
 */
int convert_force_to_servo_angle(float applied_force) {
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	ed87 0a01 	vstr	s0, [r7, #4]
    float minimum_force = 0.0f;
 8001212:	f04f 0300 	mov.w	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
    float maximum_force = 5.886f;  // Force maximale en N (100g)
 8001218:	4b1d      	ldr	r3, [pc, #116]	@ (8001290 <convert_force_to_servo_angle+0x88>)
 800121a:	613b      	str	r3, [r7, #16]

    if (applied_force < minimum_force) applied_force = minimum_force;
 800121c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001220:	edd7 7a05 	vldr	s15, [r7, #20]
 8001224:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122c:	d501      	bpl.n	8001232 <convert_force_to_servo_angle+0x2a>
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	607b      	str	r3, [r7, #4]
    if (applied_force > maximum_force) applied_force = maximum_force;
 8001232:	ed97 7a01 	vldr	s14, [r7, #4]
 8001236:	edd7 7a04 	vldr	s15, [r7, #16]
 800123a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800123e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001242:	dd01      	ble.n	8001248 <convert_force_to_servo_angle+0x40>
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	607b      	str	r3, [r7, #4]

    float resulting_angle = SERVO_MIN_ANGLE + ((applied_force - minimum_force) / (maximum_force - minimum_force)) * (SERVO_MAX_ANGLE - SERVO_MIN_ANGLE);
 8001248:	ed97 7a01 	vldr	s14, [r7, #4]
 800124c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001250:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001254:	ed97 7a04 	vldr	s14, [r7, #16]
 8001258:	edd7 7a05 	vldr	s15, [r7, #20]
 800125c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001264:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001294 <convert_force_to_servo_angle+0x8c>
 8001268:	ee67 7a87 	vmul.f32	s15, s15, s14
 800126c:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001298 <convert_force_to_servo_angle+0x90>
 8001270:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001274:	edc7 7a03 	vstr	s15, [r7, #12]
    return (int)resulting_angle;
 8001278:	edd7 7a03 	vldr	s15, [r7, #12]
 800127c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001280:	ee17 3a90 	vmov	r3, s15
}
 8001284:	4618      	mov	r0, r3
 8001286:	371c      	adds	r7, #28
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	40bc5a1d 	.word	0x40bc5a1d
 8001294:	43340000 	.word	0x43340000
 8001298:	00000000 	.word	0x00000000

0800129c <convert_angle_to_pwm>:
/**
 * @brief Convertit un angle en duty cycle pour le servomoteur
 * @param target_angle Angle souhaité (0-180°)
 * @return Duty cycle correspondant
 */
float convert_angle_to_pwm(int target_angle) {
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
    if (target_angle < SERVO_MIN_ANGLE) target_angle = SERVO_MIN_ANGLE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	da01      	bge.n	80012ae <convert_angle_to_pwm+0x12>
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
    if (target_angle > SERVO_MAX_ANGLE) target_angle = SERVO_MAX_ANGLE;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2bb4      	cmp	r3, #180	@ 0xb4
 80012b2:	dd01      	ble.n	80012b8 <convert_angle_to_pwm+0x1c>
 80012b4:	23b4      	movs	r3, #180	@ 0xb4
 80012b6:	607b      	str	r3, [r7, #4]
    float pwm_value = PWM_MIN_VALUE + (((float)(target_angle - SERVO_MIN_ANGLE) / (SERVO_MAX_ANGLE - SERVO_MIN_ANGLE)) * (PWM_MAX_VALUE - PWM_MIN_VALUE));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	ee07 3a90 	vmov	s15, r3
 80012be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c2:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80012f4 <convert_angle_to_pwm+0x58>
 80012c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ca:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80012f8 <convert_angle_to_pwm+0x5c>
 80012ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d2:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80012fc <convert_angle_to_pwm+0x60>
 80012d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012da:	edc7 7a03 	vstr	s15, [r7, #12]
    return pwm_value;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	ee07 3a90 	vmov	s15, r3
}
 80012e4:	eeb0 0a67 	vmov.f32	s0, s15
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	43340000 	.word	0x43340000
 80012f8:	45abe000 	.word	0x45abe000
 80012fc:	447a0000 	.word	0x447a0000

08001300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b094      	sub	sp, #80	@ 0x50
 8001304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001306:	f107 0320 	add.w	r3, r7, #32
 800130a:	2230      	movs	r2, #48	@ 0x30
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f003 faa6 	bl	8004860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	4b28      	ldr	r3, [pc, #160]	@ (80013cc <SystemClock_Config+0xcc>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132c:	4a27      	ldr	r2, [pc, #156]	@ (80013cc <SystemClock_Config+0xcc>)
 800132e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001332:	6413      	str	r3, [r2, #64]	@ 0x40
 8001334:	4b25      	ldr	r3, [pc, #148]	@ (80013cc <SystemClock_Config+0xcc>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001338:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001340:	2300      	movs	r3, #0
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	4b22      	ldr	r3, [pc, #136]	@ (80013d0 <SystemClock_Config+0xd0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a21      	ldr	r2, [pc, #132]	@ (80013d0 <SystemClock_Config+0xd0>)
 800134a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	4b1f      	ldr	r3, [pc, #124]	@ (80013d0 <SystemClock_Config+0xd0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800135c:	2302      	movs	r3, #2
 800135e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001360:	2301      	movs	r3, #1
 8001362:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001364:	2310      	movs	r3, #16
 8001366:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001368:	2302      	movs	r3, #2
 800136a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800136c:	2300      	movs	r3, #0
 800136e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001370:	2310      	movs	r3, #16
 8001372:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001374:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001378:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800137a:	2304      	movs	r3, #4
 800137c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800137e:	2304      	movs	r3, #4
 8001380:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001382:	f107 0320 	add.w	r3, r7, #32
 8001386:	4618      	mov	r0, r3
 8001388:	f001 fb40 	bl	8002a0c <HAL_RCC_OscConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001392:	f000 f92d 	bl	80015f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001396:	230f      	movs	r3, #15
 8001398:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800139a:	2302      	movs	r3, #2
 800139c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	2102      	movs	r1, #2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f001 fda2 	bl	8002efc <HAL_RCC_ClockConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013be:	f000 f917 	bl	80015f0 <Error_Handler>
  }
}
 80013c2:	bf00      	nop
 80013c4:	3750      	adds	r7, #80	@ 0x50
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40007000 	.word	0x40007000

080013d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80013da:	463b      	mov	r3, r7
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]

  /* Common config - Configuration optimisée pour réduire le bruit */
  hadc1.Instance = ADC1;
 80013e6:	4b21      	ldr	r3, [pc, #132]	@ (800146c <MX_ADC1_Init+0x98>)
 80013e8:	4a21      	ldr	r2, [pc, #132]	@ (8001470 <MX_ADC1_Init+0x9c>)
 80013ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV4;  // Diviseur plus élevé pour réduire le bruit
 80013ec:	4b1f      	ldr	r3, [pc, #124]	@ (800146c <MX_ADC1_Init+0x98>)
 80013ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	@ (800146c <MX_ADC1_Init+0x98>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013fa:	4b1c      	ldr	r3, [pc, #112]	@ (800146c <MX_ADC1_Init+0x98>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001400:	4b1a      	ldr	r3, [pc, #104]	@ (800146c <MX_ADC1_Init+0x98>)
 8001402:	2200      	movs	r2, #0
 8001404:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001406:	4b19      	ldr	r3, [pc, #100]	@ (800146c <MX_ADC1_Init+0x98>)
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800140e:	4b17      	ldr	r3, [pc, #92]	@ (800146c <MX_ADC1_Init+0x98>)
 8001410:	2200      	movs	r2, #0
 8001412:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001414:	4b15      	ldr	r3, [pc, #84]	@ (800146c <MX_ADC1_Init+0x98>)
 8001416:	4a17      	ldr	r2, [pc, #92]	@ (8001474 <MX_ADC1_Init+0xa0>)
 8001418:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800141a:	4b14      	ldr	r3, [pc, #80]	@ (800146c <MX_ADC1_Init+0x98>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001420:	4b12      	ldr	r3, [pc, #72]	@ (800146c <MX_ADC1_Init+0x98>)
 8001422:	2201      	movs	r2, #1
 8001424:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <MX_ADC1_Init+0x98>)
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800142e:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <MX_ADC1_Init+0x98>)
 8001430:	2201      	movs	r2, #1
 8001432:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001434:	480d      	ldr	r0, [pc, #52]	@ (800146c <MX_ADC1_Init+0x98>)
 8001436:	f000 fb0f 	bl	8001a58 <HAL_ADC_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001440:	f000 f8d6 	bl	80015f0 <Error_Handler>
  }

  /* Configure Regular Channel with longer sampling time */
  sConfig.Channel = ADC_CHANNEL_0;
 8001444:	2300      	movs	r3, #0
 8001446:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001448:	2301      	movs	r3, #1
 800144a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;  // Temps d'échantillonnage plus long pour stabilité
 800144c:	2306      	movs	r3, #6
 800144e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001450:	463b      	mov	r3, r7
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	@ (800146c <MX_ADC1_Init+0x98>)
 8001456:	f000 fdf1 	bl	800203c <HAL_ADC_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001460:	f000 f8c6 	bl	80015f0 <Error_Handler>
  }
}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200000e8 	.word	0x200000e8
 8001470:	40012000 	.word	0x40012000
 8001474:	0f000001 	.word	0x0f000001

08001478 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	@ 0x28
 800147c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]
 8001496:	615a      	str	r2, [r3, #20]
 8001498:	619a      	str	r2, [r3, #24]

  /* Configuration correcte pour 50Hz */
  htim2.Instance = TIM2;
 800149a:	4b21      	ldr	r3, [pc, #132]	@ (8001520 <MX_TIM2_Init+0xa8>)
 800149c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41;              // 84MHz/42 = 2MHz
 80014a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001520 <MX_TIM2_Init+0xa8>)
 80014a4:	2229      	movs	r2, #41	@ 0x29
 80014a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001520 <MX_TIM2_Init+0xa8>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;             // 2MHz/20000 = 50Hz
 80014ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001520 <MX_TIM2_Init+0xa8>)
 80014b0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80014b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <MX_TIM2_Init+0xa8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014bc:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <MX_TIM2_Init+0xa8>)
 80014be:	2280      	movs	r2, #128	@ 0x80
 80014c0:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014c2:	4817      	ldr	r0, [pc, #92]	@ (8001520 <MX_TIM2_Init+0xa8>)
 80014c4:	f001 ff3a 	bl	800333c <HAL_TIM_PWM_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80014ce:	f000 f88f 	bl	80015f0 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014da:	f107 0320 	add.w	r3, r7, #32
 80014de:	4619      	mov	r1, r3
 80014e0:	480f      	ldr	r0, [pc, #60]	@ (8001520 <MX_TIM2_Init+0xa8>)
 80014e2:	f002 fcb1 	bl	8003e48 <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80014ec:	f000 f880 	bl	80015f0 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f0:	2360      	movs	r3, #96	@ 0x60
 80014f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;               // Position initiale (90°)
 80014f4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80014f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2204      	movs	r2, #4
 8001506:	4619      	mov	r1, r3
 8001508:	4805      	ldr	r0, [pc, #20]	@ (8001520 <MX_TIM2_Init+0xa8>)
 800150a:	f002 f96b 	bl	80037e4 <HAL_TIM_PWM_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001514:	f000 f86c 	bl	80015f0 <Error_Handler>
  }
}
 8001518:	bf00      	nop
 800151a:	3728      	adds	r7, #40	@ 0x28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000130 	.word	0x20000130

08001524 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001528:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <MX_USART2_UART_Init+0x4c>)
 800152a:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <MX_USART2_UART_Init+0x50>)
 800152c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <MX_USART2_UART_Init+0x4c>)
 8001530:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001534:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <MX_USART2_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b0c      	ldr	r3, [pc, #48]	@ (8001570 <MX_USART2_UART_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <MX_USART2_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <MX_USART2_UART_Init+0x4c>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <MX_USART2_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <MX_USART2_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	@ (8001570 <MX_USART2_UART_Init+0x4c>)
 800155c:	f002 fcf6 	bl	8003f4c <HAL_UART_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001566:	f000 f843 	bl	80015f0 <Error_Handler>
  }
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000178 	.word	0x20000178
 8001574:	40004400 	.word	0x40004400

08001578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158c:	2300      	movs	r3, #0
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <MX_GPIO_Init+0x70>)
 8001592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001594:	4a14      	ldr	r2, [pc, #80]	@ (80015e8 <MX_GPIO_Init+0x70>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6313      	str	r3, [r2, #48]	@ 0x30
 800159c:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <MX_GPIO_Init+0x70>)
 800159e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	683b      	ldr	r3, [r7, #0]

  /* Configuration de PA1 (TIM2_CH2) en mode alternatif */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015a8:	2302      	movs	r3, #2
 80015aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015b8:	2301      	movs	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	480a      	ldr	r0, [pc, #40]	@ (80015ec <MX_GPIO_Init+0x74>)
 80015c2:	f001 f885 	bl	80026d0 <HAL_GPIO_Init>

  /* Configure GPIO pin : PA5 - LED */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015c6:	2320      	movs	r3, #32
 80015c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	4804      	ldr	r0, [pc, #16]	@ (80015ec <MX_GPIO_Init+0x74>)
 80015dc:	f001 f878 	bl	80026d0 <HAL_GPIO_Init>
}
 80015e0:	bf00      	nop
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020000 	.word	0x40020000

080015f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f4:	b672      	cpsid	i
}
 80015f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <Error_Handler+0x8>

080015fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <HAL_MspInit+0x4c>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	4a0f      	ldr	r2, [pc, #60]	@ (8001648 <HAL_MspInit+0x4c>)
 800160c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001610:	6453      	str	r3, [r2, #68]	@ 0x44
 8001612:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <HAL_MspInit+0x4c>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001616:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <HAL_MspInit+0x4c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	4a08      	ldr	r2, [pc, #32]	@ (8001648 <HAL_MspInit+0x4c>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800162c:	6413      	str	r3, [r2, #64]	@ 0x40
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <HAL_MspInit+0x4c>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800163a:	2007      	movs	r0, #7
 800163c:	f001 f806 	bl	800264c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40023800 	.word	0x40023800

0800164c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	@ 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a1b      	ldr	r2, [pc, #108]	@ (80016d8 <HAL_ADC_MspInit+0x8c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d12f      	bne.n	80016ce <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b1a      	ldr	r3, [pc, #104]	@ (80016dc <HAL_ADC_MspInit+0x90>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	4a19      	ldr	r2, [pc, #100]	@ (80016dc <HAL_ADC_MspInit+0x90>)
 8001678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800167c:	6453      	str	r3, [r2, #68]	@ 0x44
 800167e:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <HAL_ADC_MspInit+0x90>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <HAL_ADC_MspInit+0x90>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a12      	ldr	r2, [pc, #72]	@ (80016dc <HAL_ADC_MspInit+0x90>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <HAL_ADC_MspInit+0x90>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016a6:	2301      	movs	r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016aa:	2303      	movs	r3, #3
 80016ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	4809      	ldr	r0, [pc, #36]	@ (80016e0 <HAL_ADC_MspInit+0x94>)
 80016ba:	f001 f809 	bl	80026d0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	2012      	movs	r0, #18
 80016c4:	f000 ffcd 	bl	8002662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80016c8:	2012      	movs	r0, #18
 80016ca:	f000 ffe6 	bl	800269a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80016ce:	bf00      	nop
 80016d0:	3728      	adds	r7, #40	@ 0x28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40012000 	.word	0x40012000
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020000 	.word	0x40020000

080016e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016f4:	d115      	bne.n	8001722 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <HAL_TIM_PWM_MspInit+0x48>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	4a0b      	ldr	r2, [pc, #44]	@ (800172c <HAL_TIM_PWM_MspInit+0x48>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6413      	str	r3, [r2, #64]	@ 0x40
 8001706:	4b09      	ldr	r3, [pc, #36]	@ (800172c <HAL_TIM_PWM_MspInit+0x48>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	201c      	movs	r0, #28
 8001718:	f000 ffa3 	bl	8002662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800171c:	201c      	movs	r0, #28
 800171e:	f000 ffbc 	bl	800269a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800

08001730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	@ 0x28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a19      	ldr	r2, [pc, #100]	@ (80017b4 <HAL_UART_MspInit+0x84>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d12b      	bne.n	80017aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	4b18      	ldr	r3, [pc, #96]	@ (80017b8 <HAL_UART_MspInit+0x88>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	4a17      	ldr	r2, [pc, #92]	@ (80017b8 <HAL_UART_MspInit+0x88>)
 800175c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001760:	6413      	str	r3, [r2, #64]	@ 0x40
 8001762:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <HAL_UART_MspInit+0x88>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <HAL_UART_MspInit+0x88>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	4a10      	ldr	r2, [pc, #64]	@ (80017b8 <HAL_UART_MspInit+0x88>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6313      	str	r3, [r2, #48]	@ 0x30
 800177e:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <HAL_UART_MspInit+0x88>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800178a:	230c      	movs	r3, #12
 800178c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800179a:	2307      	movs	r3, #7
 800179c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	4619      	mov	r1, r3
 80017a4:	4805      	ldr	r0, [pc, #20]	@ (80017bc <HAL_UART_MspInit+0x8c>)
 80017a6:	f000 ff93 	bl	80026d0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80017aa:	bf00      	nop
 80017ac:	3728      	adds	r7, #40	@ 0x28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40004400 	.word	0x40004400
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020000 	.word	0x40020000

080017c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <NMI_Handler+0x4>

080017c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <HardFault_Handler+0x4>

080017d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <MemManage_Handler+0x4>

080017d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <BusFault_Handler+0x4>

080017e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <UsageFault_Handler+0x4>

080017e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001816:	f000 f8db 	bl	80019d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001824:	4802      	ldr	r0, [pc, #8]	@ (8001830 <ADC_IRQHandler+0x10>)
 8001826:	f000 facd 	bl	8001dc4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200000e8 	.word	0x200000e8

08001834 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001838:	4802      	ldr	r0, [pc, #8]	@ (8001844 <TIM2_IRQHandler+0x10>)
 800183a:	f001 fee3 	bl	8003604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000130 	.word	0x20000130

08001848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001850:	4a14      	ldr	r2, [pc, #80]	@ (80018a4 <_sbrk+0x5c>)
 8001852:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <_sbrk+0x60>)
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800185c:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001864:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <_sbrk+0x64>)
 8001866:	4a12      	ldr	r2, [pc, #72]	@ (80018b0 <_sbrk+0x68>)
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186a:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	429a      	cmp	r2, r3
 8001876:	d207      	bcs.n	8001888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001878:	f002 fffa 	bl	8004870 <__errno>
 800187c:	4603      	mov	r3, r0
 800187e:	220c      	movs	r2, #12
 8001880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
 8001886:	e009      	b.n	800189c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001888:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188e:	4b07      	ldr	r3, [pc, #28]	@ (80018ac <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	4a05      	ldr	r2, [pc, #20]	@ (80018ac <_sbrk+0x64>)
 8001898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20020000 	.word	0x20020000
 80018a8:	00000400 	.word	0x00000400
 80018ac:	200001c0 	.word	0x200001c0
 80018b0:	20000310 	.word	0x20000310

080018b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <SystemInit+0x20>)
 80018ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018be:	4a05      	ldr	r2, [pc, #20]	@ (80018d4 <SystemInit+0x20>)
 80018c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001910 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018dc:	f7ff ffea 	bl	80018b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018e0:	480c      	ldr	r0, [pc, #48]	@ (8001914 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018e2:	490d      	ldr	r1, [pc, #52]	@ (8001918 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018e4:	4a0d      	ldr	r2, [pc, #52]	@ (800191c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e8:	e002      	b.n	80018f0 <LoopCopyDataInit>

080018ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ee:	3304      	adds	r3, #4

080018f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f4:	d3f9      	bcc.n	80018ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001920 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001924 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018fc:	e001      	b.n	8001902 <LoopFillZerobss>

080018fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001900:	3204      	adds	r2, #4

08001902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001904:	d3fb      	bcc.n	80018fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001906:	f002 ffb9 	bl	800487c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800190a:	f7ff f971 	bl	8000bf0 <main>
  bx  lr    
 800190e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001910:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001918:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800191c:	08005398 	.word	0x08005398
  ldr r2, =_sbss
 8001920:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001924:	20000310 	.word	0x20000310

08001928 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001928:	e7fe      	b.n	8001928 <DMA1_Stream0_IRQHandler>
	...

0800192c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001930:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <HAL_Init+0x40>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0d      	ldr	r2, [pc, #52]	@ (800196c <HAL_Init+0x40>)
 8001936:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800193a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800193c:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <HAL_Init+0x40>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0a      	ldr	r2, [pc, #40]	@ (800196c <HAL_Init+0x40>)
 8001942:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001946:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001948:	4b08      	ldr	r3, [pc, #32]	@ (800196c <HAL_Init+0x40>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a07      	ldr	r2, [pc, #28]	@ (800196c <HAL_Init+0x40>)
 800194e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001954:	2003      	movs	r0, #3
 8001956:	f000 fe79 	bl	800264c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800195a:	2000      	movs	r0, #0
 800195c:	f000 f808 	bl	8001970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001960:	f7ff fe4c 	bl	80015fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023c00 	.word	0x40023c00

08001970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001978:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <HAL_InitTick+0x54>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <HAL_InitTick+0x58>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001986:	fbb3 f3f1 	udiv	r3, r3, r1
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f000 fe91 	bl	80026b6 <HAL_SYSTICK_Config>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e00e      	b.n	80019bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d80a      	bhi.n	80019ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a4:	2200      	movs	r2, #0
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f000 fe59 	bl	8002662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b0:	4a06      	ldr	r2, [pc, #24]	@ (80019cc <HAL_InitTick+0x5c>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e000      	b.n	80019bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000004 	.word	0x20000004
 80019c8:	2000000c 	.word	0x2000000c
 80019cc:	20000008 	.word	0x20000008

080019d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_IncTick+0x20>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <HAL_IncTick+0x24>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	4a04      	ldr	r2, [pc, #16]	@ (80019f4 <HAL_IncTick+0x24>)
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	2000000c 	.word	0x2000000c
 80019f4:	200001c4 	.word	0x200001c4

080019f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return uwTick;
 80019fc:	4b03      	ldr	r3, [pc, #12]	@ (8001a0c <HAL_GetTick+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	200001c4 	.word	0x200001c4

08001a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a18:	f7ff ffee 	bl	80019f8 <HAL_GetTick>
 8001a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a28:	d005      	beq.n	8001a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a54 <HAL_Delay+0x44>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a36:	bf00      	nop
 8001a38:	f7ff ffde 	bl	80019f8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d8f7      	bhi.n	8001a38 <HAL_Delay+0x28>
  {
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	2000000c 	.word	0x2000000c

08001a58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e033      	b.n	8001ad6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff fde8 	bl	800164c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d118      	bne.n	8001ac8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a9e:	f023 0302 	bic.w	r3, r3, #2
 8001aa2:	f043 0202 	orr.w	r2, r3, #2
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 fbf8 	bl	80022a0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	f023 0303 	bic.w	r3, r3, #3
 8001abe:	f043 0201 	orr.w	r2, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ac6:	e001      	b.n	8001acc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_ADC_Start+0x1a>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e097      	b.n	8001c2a <HAL_ADC_Start+0x14a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d018      	beq.n	8001b42 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b20:	4b45      	ldr	r3, [pc, #276]	@ (8001c38 <HAL_ADC_Start+0x158>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a45      	ldr	r2, [pc, #276]	@ (8001c3c <HAL_ADC_Start+0x15c>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	0c9a      	lsrs	r2, r3, #18
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b34:	e002      	b.n	8001b3c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f9      	bne.n	8001b36 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d15f      	bne.n	8001c10 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b54:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d007      	beq.n	8001b82 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b7a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b8e:	d106      	bne.n	8001b9e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b94:	f023 0206 	bic.w	r2, r3, #6
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b9c:	e002      	b.n	8001ba4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bac:	4b24      	ldr	r3, [pc, #144]	@ (8001c40 <HAL_ADC_Start+0x160>)
 8001bae:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001bb8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10f      	bne.n	8001be6 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d129      	bne.n	8001c28 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	e020      	b.n	8001c28 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a16      	ldr	r2, [pc, #88]	@ (8001c44 <HAL_ADC_Start+0x164>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d11b      	bne.n	8001c28 <HAL_ADC_Start+0x148>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d114      	bne.n	8001c28 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	e00b      	b.n	8001c28 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	f043 0210 	orr.w	r2, r3, #16
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c20:	f043 0201 	orr.w	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000004 	.word	0x20000004
 8001c3c:	431bde83 	.word	0x431bde83
 8001c40:	40012300 	.word	0x40012300
 8001c44:	40012000 	.word	0x40012000

08001c48 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d101      	bne.n	8001c5e <HAL_ADC_Stop+0x16>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e021      	b.n	8001ca2 <HAL_ADC_Stop+0x5a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0201 	bic.w	r2, r2, #1
 8001c74:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d109      	bne.n	8001c98 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c88:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c8c:	f023 0301 	bic.w	r3, r3, #1
 8001c90:	f043 0201 	orr.w	r2, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cca:	d113      	bne.n	8001cf4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cda:	d10b      	bne.n	8001cf4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce0:	f043 0220 	orr.w	r2, r3, #32
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e063      	b.n	8001dbc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cf4:	f7ff fe80 	bl	80019f8 <HAL_GetTick>
 8001cf8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cfa:	e021      	b.n	8001d40 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d02:	d01d      	beq.n	8001d40 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <HAL_ADC_PollForConversion+0x6c>
 8001d0a:	f7ff fe75 	bl	80019f8 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d212      	bcs.n	8001d40 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d00b      	beq.n	8001d40 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2c:	f043 0204 	orr.w	r2, r3, #4
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e03d      	b.n	8001dbc <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d1d6      	bne.n	8001cfc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f06f 0212 	mvn.w	r2, #18
 8001d56:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d123      	bne.n	8001dba <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d11f      	bne.n	8001dba <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d80:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d006      	beq.n	8001d96 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d111      	bne.n	8001dba <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d105      	bne.n	8001dba <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d049      	beq.n	8001e8e <HAL_ADC_IRQHandler+0xca>
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d046      	beq.n	8001e8e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d105      	bne.n	8001e18 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d12b      	bne.n	8001e7e <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d127      	bne.n	8001e7e <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e34:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d119      	bne.n	8001e7e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0220 	bic.w	r2, r2, #32
 8001e58:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d105      	bne.n	8001e7e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	f043 0201 	orr.w	r2, r3, #1
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f8bd 	bl	8001ffe <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0212 	mvn.w	r2, #18
 8001e8c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e9c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d057      	beq.n	8001f54 <HAL_ADC_IRQHandler+0x190>
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d054      	beq.n	8001f54 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d105      	bne.n	8001ec2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d139      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ed6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d006      	beq.n	8001eec <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d12b      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d124      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d11d      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d119      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f1e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d105      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3c:	f043 0201 	orr.w	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 faa7 	bl	8002498 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f06f 020c 	mvn.w	r2, #12
 8001f52:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f62:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d017      	beq.n	8001f9a <HAL_ADC_IRQHandler+0x1d6>
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d014      	beq.n	8001f9a <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d10d      	bne.n	8001f9a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f841 	bl	8002012 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0201 	mvn.w	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fa8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d015      	beq.n	8001fdc <HAL_ADC_IRQHandler+0x218>
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d012      	beq.n	8001fdc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fba:	f043 0202 	orr.w	r2, r3, #2
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f06f 0220 	mvn.w	r2, #32
 8001fca:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f82a 	bl	8002026 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f06f 0220 	mvn.w	r2, #32
 8001fda:	601a      	str	r2, [r3, #0]
  }
}
 8001fdc:	bf00      	nop
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x1c>
 8002054:	2302      	movs	r3, #2
 8002056:	e113      	b.n	8002280 <HAL_ADC_ConfigChannel+0x244>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b09      	cmp	r3, #9
 8002066:	d925      	bls.n	80020b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68d9      	ldr	r1, [r3, #12]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	b29b      	uxth	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	4613      	mov	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4413      	add	r3, r2
 800207c:	3b1e      	subs	r3, #30
 800207e:	2207      	movs	r2, #7
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43da      	mvns	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	400a      	ands	r2, r1
 800208c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68d9      	ldr	r1, [r3, #12]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	b29b      	uxth	r3, r3
 800209e:	4618      	mov	r0, r3
 80020a0:	4603      	mov	r3, r0
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	4403      	add	r3, r0
 80020a6:	3b1e      	subs	r3, #30
 80020a8:	409a      	lsls	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	e022      	b.n	80020fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6919      	ldr	r1, [r3, #16]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	4613      	mov	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4413      	add	r3, r2
 80020c8:	2207      	movs	r2, #7
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	400a      	ands	r2, r1
 80020d6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6919      	ldr	r1, [r3, #16]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	4618      	mov	r0, r3
 80020ea:	4603      	mov	r3, r0
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4403      	add	r3, r0
 80020f0:	409a      	lsls	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d824      	bhi.n	800214c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	3b05      	subs	r3, #5
 8002114:	221f      	movs	r2, #31
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43da      	mvns	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	400a      	ands	r2, r1
 8002122:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	4618      	mov	r0, r3
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	3b05      	subs	r3, #5
 800213e:	fa00 f203 	lsl.w	r2, r0, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	635a      	str	r2, [r3, #52]	@ 0x34
 800214a:	e04c      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b0c      	cmp	r3, #12
 8002152:	d824      	bhi.n	800219e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	3b23      	subs	r3, #35	@ 0x23
 8002166:	221f      	movs	r2, #31
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43da      	mvns	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	400a      	ands	r2, r1
 8002174:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	b29b      	uxth	r3, r3
 8002182:	4618      	mov	r0, r3
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	3b23      	subs	r3, #35	@ 0x23
 8002190:	fa00 f203 	lsl.w	r2, r0, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	631a      	str	r2, [r3, #48]	@ 0x30
 800219c:	e023      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	3b41      	subs	r3, #65	@ 0x41
 80021b0:	221f      	movs	r2, #31
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43da      	mvns	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	400a      	ands	r2, r1
 80021be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	4618      	mov	r0, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	3b41      	subs	r3, #65	@ 0x41
 80021da:	fa00 f203 	lsl.w	r2, r0, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021e6:	4b29      	ldr	r3, [pc, #164]	@ (800228c <HAL_ADC_ConfigChannel+0x250>)
 80021e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a28      	ldr	r2, [pc, #160]	@ (8002290 <HAL_ADC_ConfigChannel+0x254>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d10f      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x1d8>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b12      	cmp	r3, #18
 80021fa:	d10b      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a1d      	ldr	r2, [pc, #116]	@ (8002290 <HAL_ADC_ConfigChannel+0x254>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d12b      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x23a>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a1c      	ldr	r2, [pc, #112]	@ (8002294 <HAL_ADC_ConfigChannel+0x258>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d003      	beq.n	8002230 <HAL_ADC_ConfigChannel+0x1f4>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b11      	cmp	r3, #17
 800222e:	d122      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a11      	ldr	r2, [pc, #68]	@ (8002294 <HAL_ADC_ConfigChannel+0x258>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d111      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002252:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <HAL_ADC_ConfigChannel+0x25c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a11      	ldr	r2, [pc, #68]	@ (800229c <HAL_ADC_ConfigChannel+0x260>)
 8002258:	fba2 2303 	umull	r2, r3, r2, r3
 800225c:	0c9a      	lsrs	r2, r3, #18
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002268:	e002      	b.n	8002270 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	3b01      	subs	r3, #1
 800226e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f9      	bne.n	800226a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	40012300 	.word	0x40012300
 8002290:	40012000 	.word	0x40012000
 8002294:	10000012 	.word	0x10000012
 8002298:	20000004 	.word	0x20000004
 800229c:	431bde83 	.word	0x431bde83

080022a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022a8:	4b79      	ldr	r3, [pc, #484]	@ (8002490 <ADC_Init+0x1f0>)
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	431a      	orrs	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6859      	ldr	r1, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	021a      	lsls	r2, r3, #8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80022f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800231a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6899      	ldr	r1, [r3, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002332:	4a58      	ldr	r2, [pc, #352]	@ (8002494 <ADC_Init+0x1f4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d022      	beq.n	800237e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002346:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6899      	ldr	r1, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002368:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6899      	ldr	r1, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	e00f      	b.n	800239e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800238c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800239c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0202 	bic.w	r2, r2, #2
 80023ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6899      	ldr	r1, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	7e1b      	ldrb	r3, [r3, #24]
 80023b8:	005a      	lsls	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d01b      	beq.n	8002404 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023da:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80023ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6859      	ldr	r1, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f6:	3b01      	subs	r3, #1
 80023f8:	035a      	lsls	r2, r3, #13
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	e007      	b.n	8002414 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002412:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002422:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	3b01      	subs	r3, #1
 8002430:	051a      	lsls	r2, r3, #20
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002448:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6899      	ldr	r1, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002456:	025a      	lsls	r2, r3, #9
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800246e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6899      	ldr	r1, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	029a      	lsls	r2, r3, #10
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	609a      	str	r2, [r3, #8]
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	40012300 	.word	0x40012300
 8002494:	0f000001 	.word	0x0f000001

08002498 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024bc:	4b0c      	ldr	r3, [pc, #48]	@ (80024f0 <__NVIC_SetPriorityGrouping+0x44>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024c8:	4013      	ands	r3, r2
 80024ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024de:	4a04      	ldr	r2, [pc, #16]	@ (80024f0 <__NVIC_SetPriorityGrouping+0x44>)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	60d3      	str	r3, [r2, #12]
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f8:	4b04      	ldr	r3, [pc, #16]	@ (800250c <__NVIC_GetPriorityGrouping+0x18>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	0a1b      	lsrs	r3, r3, #8
 80024fe:	f003 0307 	and.w	r3, r3, #7
}
 8002502:	4618      	mov	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	2b00      	cmp	r3, #0
 8002520:	db0b      	blt.n	800253a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	f003 021f 	and.w	r2, r3, #31
 8002528:	4907      	ldr	r1, [pc, #28]	@ (8002548 <__NVIC_EnableIRQ+0x38>)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	2001      	movs	r0, #1
 8002532:	fa00 f202 	lsl.w	r2, r0, r2
 8002536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000e100 	.word	0xe000e100

0800254c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	6039      	str	r1, [r7, #0]
 8002556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	2b00      	cmp	r3, #0
 800255e:	db0a      	blt.n	8002576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	b2da      	uxtb	r2, r3
 8002564:	490c      	ldr	r1, [pc, #48]	@ (8002598 <__NVIC_SetPriority+0x4c>)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	0112      	lsls	r2, r2, #4
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	440b      	add	r3, r1
 8002570:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002574:	e00a      	b.n	800258c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4908      	ldr	r1, [pc, #32]	@ (800259c <__NVIC_SetPriority+0x50>)
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	3b04      	subs	r3, #4
 8002584:	0112      	lsls	r2, r2, #4
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	440b      	add	r3, r1
 800258a:	761a      	strb	r2, [r3, #24]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000e100 	.word	0xe000e100
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b089      	sub	sp, #36	@ 0x24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f1c3 0307 	rsb	r3, r3, #7
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	bf28      	it	cs
 80025be:	2304      	movcs	r3, #4
 80025c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3304      	adds	r3, #4
 80025c6:	2b06      	cmp	r3, #6
 80025c8:	d902      	bls.n	80025d0 <NVIC_EncodePriority+0x30>
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3b03      	subs	r3, #3
 80025ce:	e000      	b.n	80025d2 <NVIC_EncodePriority+0x32>
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	f04f 32ff 	mov.w	r2, #4294967295
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43da      	mvns	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	401a      	ands	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	43d9      	mvns	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f8:	4313      	orrs	r3, r2
         );
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3724      	adds	r7, #36	@ 0x24
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002618:	d301      	bcc.n	800261e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800261a:	2301      	movs	r3, #1
 800261c:	e00f      	b.n	800263e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800261e:	4a0a      	ldr	r2, [pc, #40]	@ (8002648 <SysTick_Config+0x40>)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002626:	210f      	movs	r1, #15
 8002628:	f04f 30ff 	mov.w	r0, #4294967295
 800262c:	f7ff ff8e 	bl	800254c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002630:	4b05      	ldr	r3, [pc, #20]	@ (8002648 <SysTick_Config+0x40>)
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002636:	4b04      	ldr	r3, [pc, #16]	@ (8002648 <SysTick_Config+0x40>)
 8002638:	2207      	movs	r2, #7
 800263a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	e000e010 	.word	0xe000e010

0800264c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff ff29 	bl	80024ac <__NVIC_SetPriorityGrouping>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002662:	b580      	push	{r7, lr}
 8002664:	b086      	sub	sp, #24
 8002666:	af00      	add	r7, sp, #0
 8002668:	4603      	mov	r3, r0
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002674:	f7ff ff3e 	bl	80024f4 <__NVIC_GetPriorityGrouping>
 8002678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	6978      	ldr	r0, [r7, #20]
 8002680:	f7ff ff8e 	bl	80025a0 <NVIC_EncodePriority>
 8002684:	4602      	mov	r2, r0
 8002686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff5d 	bl	800254c <__NVIC_SetPriority>
}
 8002692:	bf00      	nop
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff31 	bl	8002510 <__NVIC_EnableIRQ>
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff ffa2 	bl	8002608 <SysTick_Config>
 80026c4:	4603      	mov	r3, r0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b089      	sub	sp, #36	@ 0x24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	e159      	b.n	80029a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026ec:	2201      	movs	r2, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	429a      	cmp	r2, r3
 8002706:	f040 8148 	bne.w	800299a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b01      	cmp	r3, #1
 8002714:	d005      	beq.n	8002722 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271e:	2b02      	cmp	r3, #2
 8002720:	d130      	bne.n	8002784 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	2203      	movs	r2, #3
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002758:	2201      	movs	r2, #1
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	f003 0201 	and.w	r2, r3, #1
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b03      	cmp	r3, #3
 800278e:	d017      	beq.n	80027c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2203      	movs	r2, #3
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d123      	bne.n	8002814 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	08da      	lsrs	r2, r3, #3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3208      	adds	r2, #8
 80027d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	220f      	movs	r2, #15
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	08da      	lsrs	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3208      	adds	r2, #8
 800280e:	69b9      	ldr	r1, [r7, #24]
 8002810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	2203      	movs	r2, #3
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0203 	and.w	r2, r3, #3
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80a2 	beq.w	800299a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4b57      	ldr	r3, [pc, #348]	@ (80029b8 <HAL_GPIO_Init+0x2e8>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	4a56      	ldr	r2, [pc, #344]	@ (80029b8 <HAL_GPIO_Init+0x2e8>)
 8002860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002864:	6453      	str	r3, [r2, #68]	@ 0x44
 8002866:	4b54      	ldr	r3, [pc, #336]	@ (80029b8 <HAL_GPIO_Init+0x2e8>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002872:	4a52      	ldr	r2, [pc, #328]	@ (80029bc <HAL_GPIO_Init+0x2ec>)
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	089b      	lsrs	r3, r3, #2
 8002878:	3302      	adds	r3, #2
 800287a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	220f      	movs	r2, #15
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a49      	ldr	r2, [pc, #292]	@ (80029c0 <HAL_GPIO_Init+0x2f0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d019      	beq.n	80028d2 <HAL_GPIO_Init+0x202>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a48      	ldr	r2, [pc, #288]	@ (80029c4 <HAL_GPIO_Init+0x2f4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d013      	beq.n	80028ce <HAL_GPIO_Init+0x1fe>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a47      	ldr	r2, [pc, #284]	@ (80029c8 <HAL_GPIO_Init+0x2f8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00d      	beq.n	80028ca <HAL_GPIO_Init+0x1fa>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a46      	ldr	r2, [pc, #280]	@ (80029cc <HAL_GPIO_Init+0x2fc>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d007      	beq.n	80028c6 <HAL_GPIO_Init+0x1f6>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a45      	ldr	r2, [pc, #276]	@ (80029d0 <HAL_GPIO_Init+0x300>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d101      	bne.n	80028c2 <HAL_GPIO_Init+0x1f2>
 80028be:	2304      	movs	r3, #4
 80028c0:	e008      	b.n	80028d4 <HAL_GPIO_Init+0x204>
 80028c2:	2307      	movs	r3, #7
 80028c4:	e006      	b.n	80028d4 <HAL_GPIO_Init+0x204>
 80028c6:	2303      	movs	r3, #3
 80028c8:	e004      	b.n	80028d4 <HAL_GPIO_Init+0x204>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e002      	b.n	80028d4 <HAL_GPIO_Init+0x204>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <HAL_GPIO_Init+0x204>
 80028d2:	2300      	movs	r3, #0
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	f002 0203 	and.w	r2, r2, #3
 80028da:	0092      	lsls	r2, r2, #2
 80028dc:	4093      	lsls	r3, r2
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e4:	4935      	ldr	r1, [pc, #212]	@ (80029bc <HAL_GPIO_Init+0x2ec>)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	089b      	lsrs	r3, r3, #2
 80028ea:	3302      	adds	r3, #2
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028f2:	4b38      	ldr	r3, [pc, #224]	@ (80029d4 <HAL_GPIO_Init+0x304>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002916:	4a2f      	ldr	r2, [pc, #188]	@ (80029d4 <HAL_GPIO_Init+0x304>)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800291c:	4b2d      	ldr	r3, [pc, #180]	@ (80029d4 <HAL_GPIO_Init+0x304>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002940:	4a24      	ldr	r2, [pc, #144]	@ (80029d4 <HAL_GPIO_Init+0x304>)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002946:	4b23      	ldr	r3, [pc, #140]	@ (80029d4 <HAL_GPIO_Init+0x304>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800296a:	4a1a      	ldr	r2, [pc, #104]	@ (80029d4 <HAL_GPIO_Init+0x304>)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002970:	4b18      	ldr	r3, [pc, #96]	@ (80029d4 <HAL_GPIO_Init+0x304>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002994:	4a0f      	ldr	r2, [pc, #60]	@ (80029d4 <HAL_GPIO_Init+0x304>)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	3301      	adds	r3, #1
 800299e:	61fb      	str	r3, [r7, #28]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	2b0f      	cmp	r3, #15
 80029a4:	f67f aea2 	bls.w	80026ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	3724      	adds	r7, #36	@ 0x24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40013800 	.word	0x40013800
 80029c0:	40020000 	.word	0x40020000
 80029c4:	40020400 	.word	0x40020400
 80029c8:	40020800 	.word	0x40020800
 80029cc:	40020c00 	.word	0x40020c00
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40013c00 	.word	0x40013c00

080029d8 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029ea:	887a      	ldrh	r2, [r7, #2]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4013      	ands	r3, r2
 80029f0:	041a      	lsls	r2, r3, #16
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	43d9      	mvns	r1, r3
 80029f6:	887b      	ldrh	r3, [r7, #2]
 80029f8:	400b      	ands	r3, r1
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	619a      	str	r2, [r3, #24]
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e267      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d075      	beq.n	8002b16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a2a:	4b88      	ldr	r3, [pc, #544]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d00c      	beq.n	8002a50 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a36:	4b85      	ldr	r3, [pc, #532]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d112      	bne.n	8002a68 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a42:	4b82      	ldr	r3, [pc, #520]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a4e:	d10b      	bne.n	8002a68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a50:	4b7e      	ldr	r3, [pc, #504]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d05b      	beq.n	8002b14 <HAL_RCC_OscConfig+0x108>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d157      	bne.n	8002b14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e242      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a70:	d106      	bne.n	8002a80 <HAL_RCC_OscConfig+0x74>
 8002a72:	4b76      	ldr	r3, [pc, #472]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a75      	ldr	r2, [pc, #468]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e01d      	b.n	8002abc <HAL_RCC_OscConfig+0xb0>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x98>
 8002a8a:	4b70      	ldr	r3, [pc, #448]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a6f      	ldr	r2, [pc, #444]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	4b6d      	ldr	r3, [pc, #436]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a6c      	ldr	r2, [pc, #432]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	e00b      	b.n	8002abc <HAL_RCC_OscConfig+0xb0>
 8002aa4:	4b69      	ldr	r3, [pc, #420]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a68      	ldr	r2, [pc, #416]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002aaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	4b66      	ldr	r3, [pc, #408]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a65      	ldr	r2, [pc, #404]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002ab6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d013      	beq.n	8002aec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac4:	f7fe ff98 	bl	80019f8 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002acc:	f7fe ff94 	bl	80019f8 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b64      	cmp	r3, #100	@ 0x64
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e207      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ade:	4b5b      	ldr	r3, [pc, #364]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0xc0>
 8002aea:	e014      	b.n	8002b16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7fe ff84 	bl	80019f8 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af4:	f7fe ff80 	bl	80019f8 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	@ 0x64
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e1f3      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b06:	4b51      	ldr	r3, [pc, #324]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0xe8>
 8002b12:	e000      	b.n	8002b16 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d063      	beq.n	8002bea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b22:	4b4a      	ldr	r3, [pc, #296]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00b      	beq.n	8002b46 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b2e:	4b47      	ldr	r3, [pc, #284]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d11c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b3a:	4b44      	ldr	r3, [pc, #272]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d116      	bne.n	8002b74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b46:	4b41      	ldr	r3, [pc, #260]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <HAL_RCC_OscConfig+0x152>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d001      	beq.n	8002b5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e1c7      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4937      	ldr	r1, [pc, #220]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b72:	e03a      	b.n	8002bea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d020      	beq.n	8002bbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b7c:	4b34      	ldr	r3, [pc, #208]	@ (8002c50 <HAL_RCC_OscConfig+0x244>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b82:	f7fe ff39 	bl	80019f8 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b8a:	f7fe ff35 	bl	80019f8 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e1a8      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba8:	4b28      	ldr	r3, [pc, #160]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4925      	ldr	r1, [pc, #148]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	600b      	str	r3, [r1, #0]
 8002bbc:	e015      	b.n	8002bea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bbe:	4b24      	ldr	r3, [pc, #144]	@ (8002c50 <HAL_RCC_OscConfig+0x244>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc4:	f7fe ff18 	bl	80019f8 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bcc:	f7fe ff14 	bl	80019f8 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e187      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bde:	4b1b      	ldr	r3, [pc, #108]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d036      	beq.n	8002c64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d016      	beq.n	8002c2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bfe:	4b15      	ldr	r3, [pc, #84]	@ (8002c54 <HAL_RCC_OscConfig+0x248>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c04:	f7fe fef8 	bl	80019f8 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c0c:	f7fe fef4 	bl	80019f8 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e167      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c4c <HAL_RCC_OscConfig+0x240>)
 8002c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x200>
 8002c2a:	e01b      	b.n	8002c64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c2c:	4b09      	ldr	r3, [pc, #36]	@ (8002c54 <HAL_RCC_OscConfig+0x248>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c32:	f7fe fee1 	bl	80019f8 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c38:	e00e      	b.n	8002c58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c3a:	f7fe fedd 	bl	80019f8 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d907      	bls.n	8002c58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e150      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	42470000 	.word	0x42470000
 8002c54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c58:	4b88      	ldr	r3, [pc, #544]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002c5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1ea      	bne.n	8002c3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 8097 	beq.w	8002da0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c72:	2300      	movs	r3, #0
 8002c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c76:	4b81      	ldr	r3, [pc, #516]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10f      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	4b7d      	ldr	r3, [pc, #500]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	4a7c      	ldr	r2, [pc, #496]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c92:	4b7a      	ldr	r3, [pc, #488]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca2:	4b77      	ldr	r3, [pc, #476]	@ (8002e80 <HAL_RCC_OscConfig+0x474>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d118      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cae:	4b74      	ldr	r3, [pc, #464]	@ (8002e80 <HAL_RCC_OscConfig+0x474>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a73      	ldr	r2, [pc, #460]	@ (8002e80 <HAL_RCC_OscConfig+0x474>)
 8002cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cba:	f7fe fe9d 	bl	80019f8 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc2:	f7fe fe99 	bl	80019f8 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e10c      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd4:	4b6a      	ldr	r3, [pc, #424]	@ (8002e80 <HAL_RCC_OscConfig+0x474>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d106      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x2ea>
 8002ce8:	4b64      	ldr	r3, [pc, #400]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cec:	4a63      	ldr	r2, [pc, #396]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cf4:	e01c      	b.n	8002d30 <HAL_RCC_OscConfig+0x324>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b05      	cmp	r3, #5
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x30c>
 8002cfe:	4b5f      	ldr	r3, [pc, #380]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d02:	4a5e      	ldr	r2, [pc, #376]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d0a:	4b5c      	ldr	r3, [pc, #368]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0e:	4a5b      	ldr	r2, [pc, #364]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d16:	e00b      	b.n	8002d30 <HAL_RCC_OscConfig+0x324>
 8002d18:	4b58      	ldr	r3, [pc, #352]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1c:	4a57      	ldr	r2, [pc, #348]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d1e:	f023 0301 	bic.w	r3, r3, #1
 8002d22:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d24:	4b55      	ldr	r3, [pc, #340]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d28:	4a54      	ldr	r2, [pc, #336]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d2a:	f023 0304 	bic.w	r3, r3, #4
 8002d2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d015      	beq.n	8002d64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d38:	f7fe fe5e 	bl	80019f8 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3e:	e00a      	b.n	8002d56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d40:	f7fe fe5a 	bl	80019f8 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e0cb      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d56:	4b49      	ldr	r3, [pc, #292]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0ee      	beq.n	8002d40 <HAL_RCC_OscConfig+0x334>
 8002d62:	e014      	b.n	8002d8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d64:	f7fe fe48 	bl	80019f8 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6c:	f7fe fe44 	bl	80019f8 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e0b5      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d82:	4b3e      	ldr	r3, [pc, #248]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1ee      	bne.n	8002d6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d8e:	7dfb      	ldrb	r3, [r7, #23]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d105      	bne.n	8002da0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d94:	4b39      	ldr	r3, [pc, #228]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	4a38      	ldr	r2, [pc, #224]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002d9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80a1 	beq.w	8002eec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002daa:	4b34      	ldr	r3, [pc, #208]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d05c      	beq.n	8002e70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d141      	bne.n	8002e42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbe:	4b31      	ldr	r3, [pc, #196]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc4:	f7fe fe18 	bl	80019f8 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dcc:	f7fe fe14 	bl	80019f8 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e087      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dde:	4b27      	ldr	r3, [pc, #156]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69da      	ldr	r2, [r3, #28]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	019b      	lsls	r3, r3, #6
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e00:	085b      	lsrs	r3, r3, #1
 8002e02:	3b01      	subs	r3, #1
 8002e04:	041b      	lsls	r3, r3, #16
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0c:	061b      	lsls	r3, r3, #24
 8002e0e:	491b      	ldr	r1, [pc, #108]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e14:	4b1b      	ldr	r3, [pc, #108]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1a:	f7fe fded 	bl	80019f8 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e22:	f7fe fde9 	bl	80019f8 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e05c      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e34:	4b11      	ldr	r3, [pc, #68]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x416>
 8002e40:	e054      	b.n	8002eec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e42:	4b10      	ldr	r3, [pc, #64]	@ (8002e84 <HAL_RCC_OscConfig+0x478>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7fe fdd6 	bl	80019f8 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e50:	f7fe fdd2 	bl	80019f8 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e045      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e62:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <HAL_RCC_OscConfig+0x470>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x444>
 8002e6e:	e03d      	b.n	8002eec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d107      	bne.n	8002e88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e038      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40007000 	.word	0x40007000
 8002e84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e88:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef8 <HAL_RCC_OscConfig+0x4ec>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d028      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d121      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d11a      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002eb8:	4013      	ands	r3, r2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ebe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d111      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ece:	085b      	lsrs	r3, r3, #1
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d107      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800

08002efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0cc      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f10:	4b68      	ldr	r3, [pc, #416]	@ (80030b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d90c      	bls.n	8002f38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1e:	4b65      	ldr	r3, [pc, #404]	@ (80030b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f26:	4b63      	ldr	r3, [pc, #396]	@ (80030b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0b8      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d020      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f50:	4b59      	ldr	r3, [pc, #356]	@ (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	4a58      	ldr	r2, [pc, #352]	@ (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f68:	4b53      	ldr	r3, [pc, #332]	@ (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	4a52      	ldr	r2, [pc, #328]	@ (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f74:	4b50      	ldr	r3, [pc, #320]	@ (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	494d      	ldr	r1, [pc, #308]	@ (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d044      	beq.n	800301c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d107      	bne.n	8002faa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	4b47      	ldr	r3, [pc, #284]	@ (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d119      	bne.n	8002fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e07f      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d003      	beq.n	8002fba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d107      	bne.n	8002fca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fba:	4b3f      	ldr	r3, [pc, #252]	@ (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d109      	bne.n	8002fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e06f      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fca:	4b3b      	ldr	r3, [pc, #236]	@ (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e067      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fda:	4b37      	ldr	r3, [pc, #220]	@ (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f023 0203 	bic.w	r2, r3, #3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	4934      	ldr	r1, [pc, #208]	@ (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fec:	f7fe fd04 	bl	80019f8 <HAL_GetTick>
 8002ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff2:	e00a      	b.n	800300a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff4:	f7fe fd00 	bl	80019f8 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e04f      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300a:	4b2b      	ldr	r3, [pc, #172]	@ (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 020c 	and.w	r2, r3, #12
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	429a      	cmp	r2, r3
 800301a:	d1eb      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800301c:	4b25      	ldr	r3, [pc, #148]	@ (80030b4 <HAL_RCC_ClockConfig+0x1b8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d20c      	bcs.n	8003044 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302a:	4b22      	ldr	r3, [pc, #136]	@ (80030b4 <HAL_RCC_ClockConfig+0x1b8>)
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b20      	ldr	r3, [pc, #128]	@ (80030b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e032      	b.n	80030aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d008      	beq.n	8003062 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003050:	4b19      	ldr	r3, [pc, #100]	@ (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4916      	ldr	r1, [pc, #88]	@ (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	4313      	orrs	r3, r2
 8003060:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800306e:	4b12      	ldr	r3, [pc, #72]	@ (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	490e      	ldr	r1, [pc, #56]	@ (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	4313      	orrs	r3, r2
 8003080:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003082:	f000 f821 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8003086:	4602      	mov	r2, r0
 8003088:	4b0b      	ldr	r3, [pc, #44]	@ (80030b8 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	490a      	ldr	r1, [pc, #40]	@ (80030bc <HAL_RCC_ClockConfig+0x1c0>)
 8003094:	5ccb      	ldrb	r3, [r1, r3]
 8003096:	fa22 f303 	lsr.w	r3, r2, r3
 800309a:	4a09      	ldr	r2, [pc, #36]	@ (80030c0 <HAL_RCC_ClockConfig+0x1c4>)
 800309c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800309e:	4b09      	ldr	r3, [pc, #36]	@ (80030c4 <HAL_RCC_ClockConfig+0x1c8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe fc64 	bl	8001970 <HAL_InitTick>

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023c00 	.word	0x40023c00
 80030b8:	40023800 	.word	0x40023800
 80030bc:	0800533c 	.word	0x0800533c
 80030c0:	20000004 	.word	0x20000004
 80030c4:	20000008 	.word	0x20000008

080030c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030cc:	b094      	sub	sp, #80	@ 0x50
 80030ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030e0:	4b79      	ldr	r3, [pc, #484]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 030c 	and.w	r3, r3, #12
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d00d      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0x40>
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	f200 80e1 	bhi.w	80032b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <HAL_RCC_GetSysClockFreq+0x34>
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d003      	beq.n	8003102 <HAL_RCC_GetSysClockFreq+0x3a>
 80030fa:	e0db      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030fc:	4b73      	ldr	r3, [pc, #460]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x204>)
 80030fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003100:	e0db      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003102:	4b73      	ldr	r3, [pc, #460]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003104:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003106:	e0d8      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003108:	4b6f      	ldr	r3, [pc, #444]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003110:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003112:	4b6d      	ldr	r3, [pc, #436]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d063      	beq.n	80031e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800311e:	4b6a      	ldr	r3, [pc, #424]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	099b      	lsrs	r3, r3, #6
 8003124:	2200      	movs	r2, #0
 8003126:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003128:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800312a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800312c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003130:	633b      	str	r3, [r7, #48]	@ 0x30
 8003132:	2300      	movs	r3, #0
 8003134:	637b      	str	r3, [r7, #52]	@ 0x34
 8003136:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800313a:	4622      	mov	r2, r4
 800313c:	462b      	mov	r3, r5
 800313e:	f04f 0000 	mov.w	r0, #0
 8003142:	f04f 0100 	mov.w	r1, #0
 8003146:	0159      	lsls	r1, r3, #5
 8003148:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800314c:	0150      	lsls	r0, r2, #5
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4621      	mov	r1, r4
 8003154:	1a51      	subs	r1, r2, r1
 8003156:	6139      	str	r1, [r7, #16]
 8003158:	4629      	mov	r1, r5
 800315a:	eb63 0301 	sbc.w	r3, r3, r1
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800316c:	4659      	mov	r1, fp
 800316e:	018b      	lsls	r3, r1, #6
 8003170:	4651      	mov	r1, sl
 8003172:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003176:	4651      	mov	r1, sl
 8003178:	018a      	lsls	r2, r1, #6
 800317a:	4651      	mov	r1, sl
 800317c:	ebb2 0801 	subs.w	r8, r2, r1
 8003180:	4659      	mov	r1, fp
 8003182:	eb63 0901 	sbc.w	r9, r3, r1
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003192:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003196:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800319a:	4690      	mov	r8, r2
 800319c:	4699      	mov	r9, r3
 800319e:	4623      	mov	r3, r4
 80031a0:	eb18 0303 	adds.w	r3, r8, r3
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	462b      	mov	r3, r5
 80031a8:	eb49 0303 	adc.w	r3, r9, r3
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031ba:	4629      	mov	r1, r5
 80031bc:	024b      	lsls	r3, r1, #9
 80031be:	4621      	mov	r1, r4
 80031c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031c4:	4621      	mov	r1, r4
 80031c6:	024a      	lsls	r2, r1, #9
 80031c8:	4610      	mov	r0, r2
 80031ca:	4619      	mov	r1, r3
 80031cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031ce:	2200      	movs	r2, #0
 80031d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031d8:	f7fd fb90 	bl	80008fc <__aeabi_uldivmod>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4613      	mov	r3, r2
 80031e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031e4:	e058      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e6:	4b38      	ldr	r3, [pc, #224]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	099b      	lsrs	r3, r3, #6
 80031ec:	2200      	movs	r2, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	4611      	mov	r1, r2
 80031f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031f6:	623b      	str	r3, [r7, #32]
 80031f8:	2300      	movs	r3, #0
 80031fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80031fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003200:	4642      	mov	r2, r8
 8003202:	464b      	mov	r3, r9
 8003204:	f04f 0000 	mov.w	r0, #0
 8003208:	f04f 0100 	mov.w	r1, #0
 800320c:	0159      	lsls	r1, r3, #5
 800320e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003212:	0150      	lsls	r0, r2, #5
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4641      	mov	r1, r8
 800321a:	ebb2 0a01 	subs.w	sl, r2, r1
 800321e:	4649      	mov	r1, r9
 8003220:	eb63 0b01 	sbc.w	fp, r3, r1
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003230:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003234:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003238:	ebb2 040a 	subs.w	r4, r2, sl
 800323c:	eb63 050b 	sbc.w	r5, r3, fp
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	00eb      	lsls	r3, r5, #3
 800324a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800324e:	00e2      	lsls	r2, r4, #3
 8003250:	4614      	mov	r4, r2
 8003252:	461d      	mov	r5, r3
 8003254:	4643      	mov	r3, r8
 8003256:	18e3      	adds	r3, r4, r3
 8003258:	603b      	str	r3, [r7, #0]
 800325a:	464b      	mov	r3, r9
 800325c:	eb45 0303 	adc.w	r3, r5, r3
 8003260:	607b      	str	r3, [r7, #4]
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800326e:	4629      	mov	r1, r5
 8003270:	028b      	lsls	r3, r1, #10
 8003272:	4621      	mov	r1, r4
 8003274:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003278:	4621      	mov	r1, r4
 800327a:	028a      	lsls	r2, r1, #10
 800327c:	4610      	mov	r0, r2
 800327e:	4619      	mov	r1, r3
 8003280:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003282:	2200      	movs	r2, #0
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	61fa      	str	r2, [r7, #28]
 8003288:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800328c:	f7fd fb36 	bl	80008fc <__aeabi_uldivmod>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4613      	mov	r3, r2
 8003296:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003298:	4b0b      	ldr	r3, [pc, #44]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	0c1b      	lsrs	r3, r3, #16
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	3301      	adds	r3, #1
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80032a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032b2:	e002      	b.n	80032ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032b4:	4b05      	ldr	r3, [pc, #20]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x204>)
 80032b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3750      	adds	r7, #80	@ 0x50
 80032c0:	46bd      	mov	sp, r7
 80032c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032c6:	bf00      	nop
 80032c8:	40023800 	.word	0x40023800
 80032cc:	00f42400 	.word	0x00f42400
 80032d0:	007a1200 	.word	0x007a1200

080032d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d8:	4b03      	ldr	r3, [pc, #12]	@ (80032e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032da:	681b      	ldr	r3, [r3, #0]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	20000004 	.word	0x20000004

080032ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032f0:	f7ff fff0 	bl	80032d4 <HAL_RCC_GetHCLKFreq>
 80032f4:	4602      	mov	r2, r0
 80032f6:	4b05      	ldr	r3, [pc, #20]	@ (800330c <HAL_RCC_GetPCLK1Freq+0x20>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	0a9b      	lsrs	r3, r3, #10
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	4903      	ldr	r1, [pc, #12]	@ (8003310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003302:	5ccb      	ldrb	r3, [r1, r3]
 8003304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003308:	4618      	mov	r0, r3
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40023800 	.word	0x40023800
 8003310:	0800534c 	.word	0x0800534c

08003314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003318:	f7ff ffdc 	bl	80032d4 <HAL_RCC_GetHCLKFreq>
 800331c:	4602      	mov	r2, r0
 800331e:	4b05      	ldr	r3, [pc, #20]	@ (8003334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	0b5b      	lsrs	r3, r3, #13
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	4903      	ldr	r1, [pc, #12]	@ (8003338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800332a:	5ccb      	ldrb	r3, [r1, r3]
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003330:	4618      	mov	r0, r3
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40023800 	.word	0x40023800
 8003338:	0800534c 	.word	0x0800534c

0800333c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e041      	b.n	80033d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fe f9be 	bl	80016e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3304      	adds	r3, #4
 8003378:	4619      	mov	r1, r3
 800337a:	4610      	mov	r0, r2
 800337c:	f000 fb26 	bl	80039cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d109      	bne.n	8003400 <HAL_TIM_PWM_Start+0x24>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	bf14      	ite	ne
 80033f8:	2301      	movne	r3, #1
 80033fa:	2300      	moveq	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	e022      	b.n	8003446 <HAL_TIM_PWM_Start+0x6a>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	2b04      	cmp	r3, #4
 8003404:	d109      	bne.n	800341a <HAL_TIM_PWM_Start+0x3e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b01      	cmp	r3, #1
 8003410:	bf14      	ite	ne
 8003412:	2301      	movne	r3, #1
 8003414:	2300      	moveq	r3, #0
 8003416:	b2db      	uxtb	r3, r3
 8003418:	e015      	b.n	8003446 <HAL_TIM_PWM_Start+0x6a>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b08      	cmp	r3, #8
 800341e:	d109      	bne.n	8003434 <HAL_TIM_PWM_Start+0x58>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b01      	cmp	r3, #1
 800342a:	bf14      	ite	ne
 800342c:	2301      	movne	r3, #1
 800342e:	2300      	moveq	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	e008      	b.n	8003446 <HAL_TIM_PWM_Start+0x6a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	bf14      	ite	ne
 8003440:	2301      	movne	r3, #1
 8003442:	2300      	moveq	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e068      	b.n	8003520 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d104      	bne.n	800345e <HAL_TIM_PWM_Start+0x82>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800345c:	e013      	b.n	8003486 <HAL_TIM_PWM_Start+0xaa>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b04      	cmp	r3, #4
 8003462:	d104      	bne.n	800346e <HAL_TIM_PWM_Start+0x92>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800346c:	e00b      	b.n	8003486 <HAL_TIM_PWM_Start+0xaa>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b08      	cmp	r3, #8
 8003472:	d104      	bne.n	800347e <HAL_TIM_PWM_Start+0xa2>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800347c:	e003      	b.n	8003486 <HAL_TIM_PWM_Start+0xaa>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2202      	movs	r2, #2
 8003482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2201      	movs	r2, #1
 800348c:	6839      	ldr	r1, [r7, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fcb4 	bl	8003dfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a23      	ldr	r2, [pc, #140]	@ (8003528 <HAL_TIM_PWM_Start+0x14c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d107      	bne.n	80034ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003528 <HAL_TIM_PWM_Start+0x14c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d018      	beq.n	80034ea <HAL_TIM_PWM_Start+0x10e>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c0:	d013      	beq.n	80034ea <HAL_TIM_PWM_Start+0x10e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a19      	ldr	r2, [pc, #100]	@ (800352c <HAL_TIM_PWM_Start+0x150>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d00e      	beq.n	80034ea <HAL_TIM_PWM_Start+0x10e>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a17      	ldr	r2, [pc, #92]	@ (8003530 <HAL_TIM_PWM_Start+0x154>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d009      	beq.n	80034ea <HAL_TIM_PWM_Start+0x10e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a16      	ldr	r2, [pc, #88]	@ (8003534 <HAL_TIM_PWM_Start+0x158>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d004      	beq.n	80034ea <HAL_TIM_PWM_Start+0x10e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a14      	ldr	r2, [pc, #80]	@ (8003538 <HAL_TIM_PWM_Start+0x15c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d111      	bne.n	800350e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2b06      	cmp	r3, #6
 80034fa:	d010      	beq.n	800351e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350c:	e007      	b.n	800351e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 0201 	orr.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40010000 	.word	0x40010000
 800352c:	40000400 	.word	0x40000400
 8003530:	40000800 	.word	0x40000800
 8003534:	40000c00 	.word	0x40000c00
 8003538:	40014000 	.word	0x40014000

0800353c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2200      	movs	r2, #0
 800354c:	6839      	ldr	r1, [r7, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fc54 	bl	8003dfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a29      	ldr	r2, [pc, #164]	@ (8003600 <HAL_TIM_PWM_Stop+0xc4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d117      	bne.n	800358e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6a1a      	ldr	r2, [r3, #32]
 8003564:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10f      	bne.n	800358e <HAL_TIM_PWM_Stop+0x52>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6a1a      	ldr	r2, [r3, #32]
 8003574:	f240 4344 	movw	r3, #1092	@ 0x444
 8003578:	4013      	ands	r3, r2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d107      	bne.n	800358e <HAL_TIM_PWM_Stop+0x52>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800358c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6a1a      	ldr	r2, [r3, #32]
 8003594:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10f      	bne.n	80035be <HAL_TIM_PWM_Stop+0x82>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6a1a      	ldr	r2, [r3, #32]
 80035a4:	f240 4344 	movw	r3, #1092	@ 0x444
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d107      	bne.n	80035be <HAL_TIM_PWM_Stop+0x82>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0201 	bic.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d104      	bne.n	80035ce <HAL_TIM_PWM_Stop+0x92>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035cc:	e013      	b.n	80035f6 <HAL_TIM_PWM_Stop+0xba>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d104      	bne.n	80035de <HAL_TIM_PWM_Stop+0xa2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035dc:	e00b      	b.n	80035f6 <HAL_TIM_PWM_Stop+0xba>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d104      	bne.n	80035ee <HAL_TIM_PWM_Stop+0xb2>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035ec:	e003      	b.n	80035f6 <HAL_TIM_PWM_Stop+0xba>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40010000 	.word	0x40010000

08003604 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d020      	beq.n	8003668 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d01b      	beq.n	8003668 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0202 	mvn.w	r2, #2
 8003638:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f99e 	bl	8003990 <HAL_TIM_IC_CaptureCallback>
 8003654:	e005      	b.n	8003662 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f990 	bl	800397c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f9a1 	bl	80039a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b00      	cmp	r3, #0
 8003670:	d020      	beq.n	80036b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01b      	beq.n	80036b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0204 	mvn.w	r2, #4
 8003684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2202      	movs	r2, #2
 800368a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f978 	bl	8003990 <HAL_TIM_IC_CaptureCallback>
 80036a0:	e005      	b.n	80036ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f96a 	bl	800397c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f97b 	bl	80039a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d020      	beq.n	8003700 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01b      	beq.n	8003700 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0208 	mvn.w	r2, #8
 80036d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2204      	movs	r2, #4
 80036d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f952 	bl	8003990 <HAL_TIM_IC_CaptureCallback>
 80036ec:	e005      	b.n	80036fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f944 	bl	800397c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f955 	bl	80039a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	2b00      	cmp	r3, #0
 8003708:	d020      	beq.n	800374c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01b      	beq.n	800374c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0210 	mvn.w	r2, #16
 800371c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2208      	movs	r2, #8
 8003722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f92c 	bl	8003990 <HAL_TIM_IC_CaptureCallback>
 8003738:	e005      	b.n	8003746 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f91e 	bl	800397c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f92f 	bl	80039a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00c      	beq.n	8003770 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d007      	beq.n	8003770 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0201 	mvn.w	r2, #1
 8003768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f8fc 	bl	8003968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00c      	beq.n	8003794 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003780:	2b00      	cmp	r3, #0
 8003782:	d007      	beq.n	8003794 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800378c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fbd2 	bl	8003f38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00c      	beq.n	80037b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f900 	bl	80039b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00c      	beq.n	80037dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d007      	beq.n	80037dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0220 	mvn.w	r2, #32
 80037d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fba4 	bl	8003f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037dc:	bf00      	nop
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037fe:	2302      	movs	r3, #2
 8003800:	e0ae      	b.n	8003960 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b0c      	cmp	r3, #12
 800380e:	f200 809f 	bhi.w	8003950 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003812:	a201      	add	r2, pc, #4	@ (adr r2, 8003818 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003818:	0800384d 	.word	0x0800384d
 800381c:	08003951 	.word	0x08003951
 8003820:	08003951 	.word	0x08003951
 8003824:	08003951 	.word	0x08003951
 8003828:	0800388d 	.word	0x0800388d
 800382c:	08003951 	.word	0x08003951
 8003830:	08003951 	.word	0x08003951
 8003834:	08003951 	.word	0x08003951
 8003838:	080038cf 	.word	0x080038cf
 800383c:	08003951 	.word	0x08003951
 8003840:	08003951 	.word	0x08003951
 8003844:	08003951 	.word	0x08003951
 8003848:	0800390f 	.word	0x0800390f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68b9      	ldr	r1, [r7, #8]
 8003852:	4618      	mov	r0, r3
 8003854:	f000 f946 	bl	8003ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0208 	orr.w	r2, r2, #8
 8003866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0204 	bic.w	r2, r2, #4
 8003876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6999      	ldr	r1, [r3, #24]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	691a      	ldr	r2, [r3, #16]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	619a      	str	r2, [r3, #24]
      break;
 800388a:	e064      	b.n	8003956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68b9      	ldr	r1, [r7, #8]
 8003892:	4618      	mov	r0, r3
 8003894:	f000 f98c 	bl	8003bb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699a      	ldr	r2, [r3, #24]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6999      	ldr	r1, [r3, #24]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	021a      	lsls	r2, r3, #8
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	619a      	str	r2, [r3, #24]
      break;
 80038cc:	e043      	b.n	8003956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68b9      	ldr	r1, [r7, #8]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 f9d7 	bl	8003c88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69da      	ldr	r2, [r3, #28]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0208 	orr.w	r2, r2, #8
 80038e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69da      	ldr	r2, [r3, #28]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0204 	bic.w	r2, r2, #4
 80038f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69d9      	ldr	r1, [r3, #28]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	61da      	str	r2, [r3, #28]
      break;
 800390c:	e023      	b.n	8003956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68b9      	ldr	r1, [r7, #8]
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fa21 	bl	8003d5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69da      	ldr	r2, [r3, #28]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69da      	ldr	r2, [r3, #28]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69d9      	ldr	r1, [r3, #28]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	021a      	lsls	r2, r3, #8
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	61da      	str	r2, [r3, #28]
      break;
 800394e:	e002      	b.n	8003956 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	75fb      	strb	r3, [r7, #23]
      break;
 8003954:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800395e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a3a      	ldr	r2, [pc, #232]	@ (8003ac8 <TIM_Base_SetConfig+0xfc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d00f      	beq.n	8003a04 <TIM_Base_SetConfig+0x38>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ea:	d00b      	beq.n	8003a04 <TIM_Base_SetConfig+0x38>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a37      	ldr	r2, [pc, #220]	@ (8003acc <TIM_Base_SetConfig+0x100>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d007      	beq.n	8003a04 <TIM_Base_SetConfig+0x38>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a36      	ldr	r2, [pc, #216]	@ (8003ad0 <TIM_Base_SetConfig+0x104>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d003      	beq.n	8003a04 <TIM_Base_SetConfig+0x38>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a35      	ldr	r2, [pc, #212]	@ (8003ad4 <TIM_Base_SetConfig+0x108>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d108      	bne.n	8003a16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a2b      	ldr	r2, [pc, #172]	@ (8003ac8 <TIM_Base_SetConfig+0xfc>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d01b      	beq.n	8003a56 <TIM_Base_SetConfig+0x8a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a24:	d017      	beq.n	8003a56 <TIM_Base_SetConfig+0x8a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a28      	ldr	r2, [pc, #160]	@ (8003acc <TIM_Base_SetConfig+0x100>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d013      	beq.n	8003a56 <TIM_Base_SetConfig+0x8a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a27      	ldr	r2, [pc, #156]	@ (8003ad0 <TIM_Base_SetConfig+0x104>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00f      	beq.n	8003a56 <TIM_Base_SetConfig+0x8a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a26      	ldr	r2, [pc, #152]	@ (8003ad4 <TIM_Base_SetConfig+0x108>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00b      	beq.n	8003a56 <TIM_Base_SetConfig+0x8a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a25      	ldr	r2, [pc, #148]	@ (8003ad8 <TIM_Base_SetConfig+0x10c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d007      	beq.n	8003a56 <TIM_Base_SetConfig+0x8a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a24      	ldr	r2, [pc, #144]	@ (8003adc <TIM_Base_SetConfig+0x110>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d003      	beq.n	8003a56 <TIM_Base_SetConfig+0x8a>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a23      	ldr	r2, [pc, #140]	@ (8003ae0 <TIM_Base_SetConfig+0x114>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d108      	bne.n	8003a68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8003ac8 <TIM_Base_SetConfig+0xfc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d103      	bne.n	8003a9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d105      	bne.n	8003aba <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f023 0201 	bic.w	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	611a      	str	r2, [r3, #16]
  }
}
 8003aba:	bf00      	nop
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40010000 	.word	0x40010000
 8003acc:	40000400 	.word	0x40000400
 8003ad0:	40000800 	.word	0x40000800
 8003ad4:	40000c00 	.word	0x40000c00
 8003ad8:	40014000 	.word	0x40014000
 8003adc:	40014400 	.word	0x40014400
 8003ae0:	40014800 	.word	0x40014800

08003ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	f023 0201 	bic.w	r2, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0303 	bic.w	r3, r3, #3
 8003b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f023 0302 	bic.w	r3, r3, #2
 8003b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a1c      	ldr	r2, [pc, #112]	@ (8003bac <TIM_OC1_SetConfig+0xc8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d10c      	bne.n	8003b5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f023 0308 	bic.w	r3, r3, #8
 8003b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f023 0304 	bic.w	r3, r3, #4
 8003b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a13      	ldr	r2, [pc, #76]	@ (8003bac <TIM_OC1_SetConfig+0xc8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d111      	bne.n	8003b86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	621a      	str	r2, [r3, #32]
}
 8003ba0:	bf00      	nop
 8003ba2:	371c      	adds	r7, #28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	40010000 	.word	0x40010000

08003bb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	f023 0210 	bic.w	r2, r3, #16
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	021b      	lsls	r3, r3, #8
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f023 0320 	bic.w	r3, r3, #32
 8003bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8003c84 <TIM_OC2_SetConfig+0xd4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d10d      	bne.n	8003c2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a15      	ldr	r2, [pc, #84]	@ (8003c84 <TIM_OC2_SetConfig+0xd4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d113      	bne.n	8003c5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	621a      	str	r2, [r3, #32]
}
 8003c76:	bf00      	nop
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40010000 	.word	0x40010000

08003c88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0303 	bic.w	r3, r3, #3
 8003cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d58 <TIM_OC3_SetConfig+0xd0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d10d      	bne.n	8003d02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a14      	ldr	r2, [pc, #80]	@ (8003d58 <TIM_OC3_SetConfig+0xd0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d113      	bne.n	8003d32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	621a      	str	r2, [r3, #32]
}
 8003d4c:	bf00      	nop
 8003d4e:	371c      	adds	r7, #28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	40010000 	.word	0x40010000

08003d5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	021b      	lsls	r3, r3, #8
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	031b      	lsls	r3, r3, #12
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a10      	ldr	r2, [pc, #64]	@ (8003df8 <TIM_OC4_SetConfig+0x9c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d109      	bne.n	8003dd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	019b      	lsls	r3, r3, #6
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	621a      	str	r2, [r3, #32]
}
 8003dea:	bf00      	nop
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40010000 	.word	0x40010000

08003dfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f003 031f 	and.w	r3, r3, #31
 8003e0e:	2201      	movs	r2, #1
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a1a      	ldr	r2, [r3, #32]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	401a      	ands	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a1a      	ldr	r2, [r3, #32]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	fa01 f303 	lsl.w	r3, r1, r3
 8003e34:	431a      	orrs	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	621a      	str	r2, [r3, #32]
}
 8003e3a:	bf00      	nop
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
	...

08003e48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e050      	b.n	8003f02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003f10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d018      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eac:	d013      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a18      	ldr	r2, [pc, #96]	@ (8003f14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00e      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a16      	ldr	r2, [pc, #88]	@ (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d009      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a15      	ldr	r2, [pc, #84]	@ (8003f1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d004      	beq.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a13      	ldr	r2, [pc, #76]	@ (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d10c      	bne.n	8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003edc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40010000 	.word	0x40010000
 8003f14:	40000400 	.word	0x40000400
 8003f18:	40000800 	.word	0x40000800
 8003f1c:	40000c00 	.word	0x40000c00
 8003f20:	40014000 	.word	0x40014000

08003f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e042      	b.n	8003fe4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7fd fbdc 	bl	8001730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2224      	movs	r2, #36	@ 0x24
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f9d1 	bl	8004338 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695a      	ldr	r2, [r3, #20]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08a      	sub	sp, #40	@ 0x28
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b20      	cmp	r3, #32
 800400a:	d175      	bne.n	80040f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <HAL_UART_Transmit+0x2c>
 8004012:	88fb      	ldrh	r3, [r7, #6]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e06e      	b.n	80040fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2221      	movs	r2, #33	@ 0x21
 8004026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800402a:	f7fd fce5 	bl	80019f8 <HAL_GetTick>
 800402e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	88fa      	ldrh	r2, [r7, #6]
 8004034:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	88fa      	ldrh	r2, [r7, #6]
 800403a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004044:	d108      	bne.n	8004058 <HAL_UART_Transmit+0x6c>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d104      	bne.n	8004058 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	e003      	b.n	8004060 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800405c:	2300      	movs	r3, #0
 800405e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004060:	e02e      	b.n	80040c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2200      	movs	r2, #0
 800406a:	2180      	movs	r1, #128	@ 0x80
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 f86d 	bl	800414c <UART_WaitOnFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e03a      	b.n	80040fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10b      	bne.n	80040a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004098:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	3302      	adds	r3, #2
 800409e:	61bb      	str	r3, [r7, #24]
 80040a0:	e007      	b.n	80040b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	781a      	ldrb	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	3301      	adds	r3, #1
 80040b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1cb      	bne.n	8004062 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2200      	movs	r2, #0
 80040d2:	2140      	movs	r1, #64	@ 0x40
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 f839 	bl	800414c <UART_WaitOnFlagUntilTimeout>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e006      	b.n	80040fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	e000      	b.n	80040fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80040f8:	2302      	movs	r3, #2
  }
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3720      	adds	r7, #32
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b084      	sub	sp, #16
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	4613      	mov	r3, r2
 800410e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b20      	cmp	r3, #32
 800411a:	d112      	bne.n	8004142 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <HAL_UART_Receive_IT+0x26>
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e00b      	b.n	8004144 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	461a      	mov	r2, r3
 8004136:	68b9      	ldr	r1, [r7, #8]
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 f860 	bl	80041fe <UART_Start_Receive_IT>
 800413e:	4603      	mov	r3, r0
 8004140:	e000      	b.n	8004144 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004142:	2302      	movs	r3, #2
  }
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	603b      	str	r3, [r7, #0]
 8004158:	4613      	mov	r3, r2
 800415a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800415c:	e03b      	b.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004164:	d037      	beq.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004166:	f7fd fc47 	bl	80019f8 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	6a3a      	ldr	r2, [r7, #32]
 8004172:	429a      	cmp	r2, r3
 8004174:	d302      	bcc.n	800417c <UART_WaitOnFlagUntilTimeout+0x30>
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e03a      	b.n	80041f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	d023      	beq.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b80      	cmp	r3, #128	@ 0x80
 8004192:	d020      	beq.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b40      	cmp	r3, #64	@ 0x40
 8004198:	d01d      	beq.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d116      	bne.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 f857 	bl	8004272 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2208      	movs	r2, #8
 80041c8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e00f      	b.n	80041f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4013      	ands	r3, r2
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	bf0c      	ite	eq
 80041e6:	2301      	moveq	r3, #1
 80041e8:	2300      	movne	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d0b4      	beq.n	800415e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041fe:	b480      	push	{r7}
 8004200:	b085      	sub	sp, #20
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	4613      	mov	r3, r2
 800420a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	88fa      	ldrh	r2, [r7, #6]
 8004216:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	88fa      	ldrh	r2, [r7, #6]
 800421c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2222      	movs	r2, #34	@ 0x22
 8004228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d007      	beq.n	8004244 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004242:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0220 	orr.w	r2, r2, #32
 8004262:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004272:	b480      	push	{r7}
 8004274:	b095      	sub	sp, #84	@ 0x54
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	330c      	adds	r3, #12
 8004280:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800428a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004290:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	330c      	adds	r3, #12
 8004298:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800429a:	643a      	str	r2, [r7, #64]	@ 0x40
 800429c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e5      	bne.n	800427a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3314      	adds	r3, #20
 80042b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	e853 3f00 	ldrex	r3, [r3]
 80042bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	f023 0301 	bic.w	r3, r3, #1
 80042c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3314      	adds	r3, #20
 80042cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042d6:	e841 2300 	strex	r3, r2, [r1]
 80042da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1e5      	bne.n	80042ae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d119      	bne.n	800431e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	330c      	adds	r3, #12
 80042f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f023 0310 	bic.w	r3, r3, #16
 8004300:	647b      	str	r3, [r7, #68]	@ 0x44
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	330c      	adds	r3, #12
 8004308:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800430a:	61ba      	str	r2, [r7, #24]
 800430c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430e:	6979      	ldr	r1, [r7, #20]
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	e841 2300 	strex	r3, r2, [r1]
 8004316:	613b      	str	r3, [r7, #16]
   return(result);
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1e5      	bne.n	80042ea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2220      	movs	r2, #32
 8004322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800432c:	bf00      	nop
 800432e:	3754      	adds	r7, #84	@ 0x54
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800433c:	b0c0      	sub	sp, #256	@ 0x100
 800433e:	af00      	add	r7, sp, #0
 8004340:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004354:	68d9      	ldr	r1, [r3, #12]
 8004356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	ea40 0301 	orr.w	r3, r0, r1
 8004360:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	431a      	orrs	r2, r3
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	431a      	orrs	r2, r3
 8004378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004390:	f021 010c 	bic.w	r1, r1, #12
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800439e:	430b      	orrs	r3, r1
 80043a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80043ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b2:	6999      	ldr	r1, [r3, #24]
 80043b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	ea40 0301 	orr.w	r3, r0, r1
 80043be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4b8f      	ldr	r3, [pc, #572]	@ (8004604 <UART_SetConfig+0x2cc>)
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d005      	beq.n	80043d8 <UART_SetConfig+0xa0>
 80043cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	4b8d      	ldr	r3, [pc, #564]	@ (8004608 <UART_SetConfig+0x2d0>)
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d104      	bne.n	80043e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043d8:	f7fe ff9c 	bl	8003314 <HAL_RCC_GetPCLK2Freq>
 80043dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80043e0:	e003      	b.n	80043ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043e2:	f7fe ff83 	bl	80032ec <HAL_RCC_GetPCLK1Freq>
 80043e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043f4:	f040 810c 	bne.w	8004610 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043fc:	2200      	movs	r2, #0
 80043fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004402:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004406:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800440a:	4622      	mov	r2, r4
 800440c:	462b      	mov	r3, r5
 800440e:	1891      	adds	r1, r2, r2
 8004410:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004412:	415b      	adcs	r3, r3
 8004414:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004416:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800441a:	4621      	mov	r1, r4
 800441c:	eb12 0801 	adds.w	r8, r2, r1
 8004420:	4629      	mov	r1, r5
 8004422:	eb43 0901 	adc.w	r9, r3, r1
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004432:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004436:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800443a:	4690      	mov	r8, r2
 800443c:	4699      	mov	r9, r3
 800443e:	4623      	mov	r3, r4
 8004440:	eb18 0303 	adds.w	r3, r8, r3
 8004444:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004448:	462b      	mov	r3, r5
 800444a:	eb49 0303 	adc.w	r3, r9, r3
 800444e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800445e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004462:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004466:	460b      	mov	r3, r1
 8004468:	18db      	adds	r3, r3, r3
 800446a:	653b      	str	r3, [r7, #80]	@ 0x50
 800446c:	4613      	mov	r3, r2
 800446e:	eb42 0303 	adc.w	r3, r2, r3
 8004472:	657b      	str	r3, [r7, #84]	@ 0x54
 8004474:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004478:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800447c:	f7fc fa3e 	bl	80008fc <__aeabi_uldivmod>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4b61      	ldr	r3, [pc, #388]	@ (800460c <UART_SetConfig+0x2d4>)
 8004486:	fba3 2302 	umull	r2, r3, r3, r2
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	011c      	lsls	r4, r3, #4
 800448e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004492:	2200      	movs	r2, #0
 8004494:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004498:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800449c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80044a0:	4642      	mov	r2, r8
 80044a2:	464b      	mov	r3, r9
 80044a4:	1891      	adds	r1, r2, r2
 80044a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80044a8:	415b      	adcs	r3, r3
 80044aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80044b0:	4641      	mov	r1, r8
 80044b2:	eb12 0a01 	adds.w	sl, r2, r1
 80044b6:	4649      	mov	r1, r9
 80044b8:	eb43 0b01 	adc.w	fp, r3, r1
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044d0:	4692      	mov	sl, r2
 80044d2:	469b      	mov	fp, r3
 80044d4:	4643      	mov	r3, r8
 80044d6:	eb1a 0303 	adds.w	r3, sl, r3
 80044da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044de:	464b      	mov	r3, r9
 80044e0:	eb4b 0303 	adc.w	r3, fp, r3
 80044e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80044f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044fc:	460b      	mov	r3, r1
 80044fe:	18db      	adds	r3, r3, r3
 8004500:	643b      	str	r3, [r7, #64]	@ 0x40
 8004502:	4613      	mov	r3, r2
 8004504:	eb42 0303 	adc.w	r3, r2, r3
 8004508:	647b      	str	r3, [r7, #68]	@ 0x44
 800450a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800450e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004512:	f7fc f9f3 	bl	80008fc <__aeabi_uldivmod>
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	4611      	mov	r1, r2
 800451c:	4b3b      	ldr	r3, [pc, #236]	@ (800460c <UART_SetConfig+0x2d4>)
 800451e:	fba3 2301 	umull	r2, r3, r3, r1
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	2264      	movs	r2, #100	@ 0x64
 8004526:	fb02 f303 	mul.w	r3, r2, r3
 800452a:	1acb      	subs	r3, r1, r3
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004532:	4b36      	ldr	r3, [pc, #216]	@ (800460c <UART_SetConfig+0x2d4>)
 8004534:	fba3 2302 	umull	r2, r3, r3, r2
 8004538:	095b      	lsrs	r3, r3, #5
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004540:	441c      	add	r4, r3
 8004542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004546:	2200      	movs	r2, #0
 8004548:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800454c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004550:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004554:	4642      	mov	r2, r8
 8004556:	464b      	mov	r3, r9
 8004558:	1891      	adds	r1, r2, r2
 800455a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800455c:	415b      	adcs	r3, r3
 800455e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004560:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004564:	4641      	mov	r1, r8
 8004566:	1851      	adds	r1, r2, r1
 8004568:	6339      	str	r1, [r7, #48]	@ 0x30
 800456a:	4649      	mov	r1, r9
 800456c:	414b      	adcs	r3, r1
 800456e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800457c:	4659      	mov	r1, fp
 800457e:	00cb      	lsls	r3, r1, #3
 8004580:	4651      	mov	r1, sl
 8004582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004586:	4651      	mov	r1, sl
 8004588:	00ca      	lsls	r2, r1, #3
 800458a:	4610      	mov	r0, r2
 800458c:	4619      	mov	r1, r3
 800458e:	4603      	mov	r3, r0
 8004590:	4642      	mov	r2, r8
 8004592:	189b      	adds	r3, r3, r2
 8004594:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004598:	464b      	mov	r3, r9
 800459a:	460a      	mov	r2, r1
 800459c:	eb42 0303 	adc.w	r3, r2, r3
 80045a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80045b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80045b8:	460b      	mov	r3, r1
 80045ba:	18db      	adds	r3, r3, r3
 80045bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045be:	4613      	mov	r3, r2
 80045c0:	eb42 0303 	adc.w	r3, r2, r3
 80045c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80045ce:	f7fc f995 	bl	80008fc <__aeabi_uldivmod>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	4b0d      	ldr	r3, [pc, #52]	@ (800460c <UART_SetConfig+0x2d4>)
 80045d8:	fba3 1302 	umull	r1, r3, r3, r2
 80045dc:	095b      	lsrs	r3, r3, #5
 80045de:	2164      	movs	r1, #100	@ 0x64
 80045e0:	fb01 f303 	mul.w	r3, r1, r3
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	3332      	adds	r3, #50	@ 0x32
 80045ea:	4a08      	ldr	r2, [pc, #32]	@ (800460c <UART_SetConfig+0x2d4>)
 80045ec:	fba2 2303 	umull	r2, r3, r2, r3
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	f003 0207 	and.w	r2, r3, #7
 80045f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4422      	add	r2, r4
 80045fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004600:	e106      	b.n	8004810 <UART_SetConfig+0x4d8>
 8004602:	bf00      	nop
 8004604:	40011000 	.word	0x40011000
 8004608:	40011400 	.word	0x40011400
 800460c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004614:	2200      	movs	r2, #0
 8004616:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800461a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800461e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004622:	4642      	mov	r2, r8
 8004624:	464b      	mov	r3, r9
 8004626:	1891      	adds	r1, r2, r2
 8004628:	6239      	str	r1, [r7, #32]
 800462a:	415b      	adcs	r3, r3
 800462c:	627b      	str	r3, [r7, #36]	@ 0x24
 800462e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004632:	4641      	mov	r1, r8
 8004634:	1854      	adds	r4, r2, r1
 8004636:	4649      	mov	r1, r9
 8004638:	eb43 0501 	adc.w	r5, r3, r1
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	00eb      	lsls	r3, r5, #3
 8004646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800464a:	00e2      	lsls	r2, r4, #3
 800464c:	4614      	mov	r4, r2
 800464e:	461d      	mov	r5, r3
 8004650:	4643      	mov	r3, r8
 8004652:	18e3      	adds	r3, r4, r3
 8004654:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004658:	464b      	mov	r3, r9
 800465a:	eb45 0303 	adc.w	r3, r5, r3
 800465e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800466e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800467e:	4629      	mov	r1, r5
 8004680:	008b      	lsls	r3, r1, #2
 8004682:	4621      	mov	r1, r4
 8004684:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004688:	4621      	mov	r1, r4
 800468a:	008a      	lsls	r2, r1, #2
 800468c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004690:	f7fc f934 	bl	80008fc <__aeabi_uldivmod>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4b60      	ldr	r3, [pc, #384]	@ (800481c <UART_SetConfig+0x4e4>)
 800469a:	fba3 2302 	umull	r2, r3, r3, r2
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	011c      	lsls	r4, r3, #4
 80046a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046a6:	2200      	movs	r2, #0
 80046a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80046b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80046b4:	4642      	mov	r2, r8
 80046b6:	464b      	mov	r3, r9
 80046b8:	1891      	adds	r1, r2, r2
 80046ba:	61b9      	str	r1, [r7, #24]
 80046bc:	415b      	adcs	r3, r3
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046c4:	4641      	mov	r1, r8
 80046c6:	1851      	adds	r1, r2, r1
 80046c8:	6139      	str	r1, [r7, #16]
 80046ca:	4649      	mov	r1, r9
 80046cc:	414b      	adcs	r3, r1
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046dc:	4659      	mov	r1, fp
 80046de:	00cb      	lsls	r3, r1, #3
 80046e0:	4651      	mov	r1, sl
 80046e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046e6:	4651      	mov	r1, sl
 80046e8:	00ca      	lsls	r2, r1, #3
 80046ea:	4610      	mov	r0, r2
 80046ec:	4619      	mov	r1, r3
 80046ee:	4603      	mov	r3, r0
 80046f0:	4642      	mov	r2, r8
 80046f2:	189b      	adds	r3, r3, r2
 80046f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046f8:	464b      	mov	r3, r9
 80046fa:	460a      	mov	r2, r1
 80046fc:	eb42 0303 	adc.w	r3, r2, r3
 8004700:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800470e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800471c:	4649      	mov	r1, r9
 800471e:	008b      	lsls	r3, r1, #2
 8004720:	4641      	mov	r1, r8
 8004722:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004726:	4641      	mov	r1, r8
 8004728:	008a      	lsls	r2, r1, #2
 800472a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800472e:	f7fc f8e5 	bl	80008fc <__aeabi_uldivmod>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4611      	mov	r1, r2
 8004738:	4b38      	ldr	r3, [pc, #224]	@ (800481c <UART_SetConfig+0x4e4>)
 800473a:	fba3 2301 	umull	r2, r3, r3, r1
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	2264      	movs	r2, #100	@ 0x64
 8004742:	fb02 f303 	mul.w	r3, r2, r3
 8004746:	1acb      	subs	r3, r1, r3
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	3332      	adds	r3, #50	@ 0x32
 800474c:	4a33      	ldr	r2, [pc, #204]	@ (800481c <UART_SetConfig+0x4e4>)
 800474e:	fba2 2303 	umull	r2, r3, r2, r3
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004758:	441c      	add	r4, r3
 800475a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800475e:	2200      	movs	r2, #0
 8004760:	673b      	str	r3, [r7, #112]	@ 0x70
 8004762:	677a      	str	r2, [r7, #116]	@ 0x74
 8004764:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004768:	4642      	mov	r2, r8
 800476a:	464b      	mov	r3, r9
 800476c:	1891      	adds	r1, r2, r2
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	415b      	adcs	r3, r3
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004778:	4641      	mov	r1, r8
 800477a:	1851      	adds	r1, r2, r1
 800477c:	6039      	str	r1, [r7, #0]
 800477e:	4649      	mov	r1, r9
 8004780:	414b      	adcs	r3, r1
 8004782:	607b      	str	r3, [r7, #4]
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004790:	4659      	mov	r1, fp
 8004792:	00cb      	lsls	r3, r1, #3
 8004794:	4651      	mov	r1, sl
 8004796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800479a:	4651      	mov	r1, sl
 800479c:	00ca      	lsls	r2, r1, #3
 800479e:	4610      	mov	r0, r2
 80047a0:	4619      	mov	r1, r3
 80047a2:	4603      	mov	r3, r0
 80047a4:	4642      	mov	r2, r8
 80047a6:	189b      	adds	r3, r3, r2
 80047a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047aa:	464b      	mov	r3, r9
 80047ac:	460a      	mov	r2, r1
 80047ae:	eb42 0303 	adc.w	r3, r2, r3
 80047b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80047be:	667a      	str	r2, [r7, #100]	@ 0x64
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80047cc:	4649      	mov	r1, r9
 80047ce:	008b      	lsls	r3, r1, #2
 80047d0:	4641      	mov	r1, r8
 80047d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047d6:	4641      	mov	r1, r8
 80047d8:	008a      	lsls	r2, r1, #2
 80047da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80047de:	f7fc f88d 	bl	80008fc <__aeabi_uldivmod>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4b0d      	ldr	r3, [pc, #52]	@ (800481c <UART_SetConfig+0x4e4>)
 80047e8:	fba3 1302 	umull	r1, r3, r3, r2
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	2164      	movs	r1, #100	@ 0x64
 80047f0:	fb01 f303 	mul.w	r3, r1, r3
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	3332      	adds	r3, #50	@ 0x32
 80047fa:	4a08      	ldr	r2, [pc, #32]	@ (800481c <UART_SetConfig+0x4e4>)
 80047fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	f003 020f 	and.w	r2, r3, #15
 8004806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4422      	add	r2, r4
 800480e:	609a      	str	r2, [r3, #8]
}
 8004810:	bf00      	nop
 8004812:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004816:	46bd      	mov	sp, r7
 8004818:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800481c:	51eb851f 	.word	0x51eb851f

08004820 <siprintf>:
 8004820:	b40e      	push	{r1, r2, r3}
 8004822:	b500      	push	{lr}
 8004824:	b09c      	sub	sp, #112	@ 0x70
 8004826:	ab1d      	add	r3, sp, #116	@ 0x74
 8004828:	9002      	str	r0, [sp, #8]
 800482a:	9006      	str	r0, [sp, #24]
 800482c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004830:	4809      	ldr	r0, [pc, #36]	@ (8004858 <siprintf+0x38>)
 8004832:	9107      	str	r1, [sp, #28]
 8004834:	9104      	str	r1, [sp, #16]
 8004836:	4909      	ldr	r1, [pc, #36]	@ (800485c <siprintf+0x3c>)
 8004838:	f853 2b04 	ldr.w	r2, [r3], #4
 800483c:	9105      	str	r1, [sp, #20]
 800483e:	6800      	ldr	r0, [r0, #0]
 8004840:	9301      	str	r3, [sp, #4]
 8004842:	a902      	add	r1, sp, #8
 8004844:	f000 f994 	bl	8004b70 <_svfiprintf_r>
 8004848:	9b02      	ldr	r3, [sp, #8]
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	b01c      	add	sp, #112	@ 0x70
 8004850:	f85d eb04 	ldr.w	lr, [sp], #4
 8004854:	b003      	add	sp, #12
 8004856:	4770      	bx	lr
 8004858:	20000010 	.word	0x20000010
 800485c:	ffff0208 	.word	0xffff0208

08004860 <memset>:
 8004860:	4402      	add	r2, r0
 8004862:	4603      	mov	r3, r0
 8004864:	4293      	cmp	r3, r2
 8004866:	d100      	bne.n	800486a <memset+0xa>
 8004868:	4770      	bx	lr
 800486a:	f803 1b01 	strb.w	r1, [r3], #1
 800486e:	e7f9      	b.n	8004864 <memset+0x4>

08004870 <__errno>:
 8004870:	4b01      	ldr	r3, [pc, #4]	@ (8004878 <__errno+0x8>)
 8004872:	6818      	ldr	r0, [r3, #0]
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	20000010 	.word	0x20000010

0800487c <__libc_init_array>:
 800487c:	b570      	push	{r4, r5, r6, lr}
 800487e:	4d0d      	ldr	r5, [pc, #52]	@ (80048b4 <__libc_init_array+0x38>)
 8004880:	4c0d      	ldr	r4, [pc, #52]	@ (80048b8 <__libc_init_array+0x3c>)
 8004882:	1b64      	subs	r4, r4, r5
 8004884:	10a4      	asrs	r4, r4, #2
 8004886:	2600      	movs	r6, #0
 8004888:	42a6      	cmp	r6, r4
 800488a:	d109      	bne.n	80048a0 <__libc_init_array+0x24>
 800488c:	4d0b      	ldr	r5, [pc, #44]	@ (80048bc <__libc_init_array+0x40>)
 800488e:	4c0c      	ldr	r4, [pc, #48]	@ (80048c0 <__libc_init_array+0x44>)
 8004890:	f000 fc66 	bl	8005160 <_init>
 8004894:	1b64      	subs	r4, r4, r5
 8004896:	10a4      	asrs	r4, r4, #2
 8004898:	2600      	movs	r6, #0
 800489a:	42a6      	cmp	r6, r4
 800489c:	d105      	bne.n	80048aa <__libc_init_array+0x2e>
 800489e:	bd70      	pop	{r4, r5, r6, pc}
 80048a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a4:	4798      	blx	r3
 80048a6:	3601      	adds	r6, #1
 80048a8:	e7ee      	b.n	8004888 <__libc_init_array+0xc>
 80048aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ae:	4798      	blx	r3
 80048b0:	3601      	adds	r6, #1
 80048b2:	e7f2      	b.n	800489a <__libc_init_array+0x1e>
 80048b4:	08005390 	.word	0x08005390
 80048b8:	08005390 	.word	0x08005390
 80048bc:	08005390 	.word	0x08005390
 80048c0:	08005394 	.word	0x08005394

080048c4 <__retarget_lock_acquire_recursive>:
 80048c4:	4770      	bx	lr

080048c6 <__retarget_lock_release_recursive>:
 80048c6:	4770      	bx	lr

080048c8 <_free_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	4605      	mov	r5, r0
 80048cc:	2900      	cmp	r1, #0
 80048ce:	d041      	beq.n	8004954 <_free_r+0x8c>
 80048d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d4:	1f0c      	subs	r4, r1, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	bfb8      	it	lt
 80048da:	18e4      	addlt	r4, r4, r3
 80048dc:	f000 f8e0 	bl	8004aa0 <__malloc_lock>
 80048e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004958 <_free_r+0x90>)
 80048e2:	6813      	ldr	r3, [r2, #0]
 80048e4:	b933      	cbnz	r3, 80048f4 <_free_r+0x2c>
 80048e6:	6063      	str	r3, [r4, #4]
 80048e8:	6014      	str	r4, [r2, #0]
 80048ea:	4628      	mov	r0, r5
 80048ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048f0:	f000 b8dc 	b.w	8004aac <__malloc_unlock>
 80048f4:	42a3      	cmp	r3, r4
 80048f6:	d908      	bls.n	800490a <_free_r+0x42>
 80048f8:	6820      	ldr	r0, [r4, #0]
 80048fa:	1821      	adds	r1, r4, r0
 80048fc:	428b      	cmp	r3, r1
 80048fe:	bf01      	itttt	eq
 8004900:	6819      	ldreq	r1, [r3, #0]
 8004902:	685b      	ldreq	r3, [r3, #4]
 8004904:	1809      	addeq	r1, r1, r0
 8004906:	6021      	streq	r1, [r4, #0]
 8004908:	e7ed      	b.n	80048e6 <_free_r+0x1e>
 800490a:	461a      	mov	r2, r3
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	b10b      	cbz	r3, 8004914 <_free_r+0x4c>
 8004910:	42a3      	cmp	r3, r4
 8004912:	d9fa      	bls.n	800490a <_free_r+0x42>
 8004914:	6811      	ldr	r1, [r2, #0]
 8004916:	1850      	adds	r0, r2, r1
 8004918:	42a0      	cmp	r0, r4
 800491a:	d10b      	bne.n	8004934 <_free_r+0x6c>
 800491c:	6820      	ldr	r0, [r4, #0]
 800491e:	4401      	add	r1, r0
 8004920:	1850      	adds	r0, r2, r1
 8004922:	4283      	cmp	r3, r0
 8004924:	6011      	str	r1, [r2, #0]
 8004926:	d1e0      	bne.n	80048ea <_free_r+0x22>
 8004928:	6818      	ldr	r0, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	6053      	str	r3, [r2, #4]
 800492e:	4408      	add	r0, r1
 8004930:	6010      	str	r0, [r2, #0]
 8004932:	e7da      	b.n	80048ea <_free_r+0x22>
 8004934:	d902      	bls.n	800493c <_free_r+0x74>
 8004936:	230c      	movs	r3, #12
 8004938:	602b      	str	r3, [r5, #0]
 800493a:	e7d6      	b.n	80048ea <_free_r+0x22>
 800493c:	6820      	ldr	r0, [r4, #0]
 800493e:	1821      	adds	r1, r4, r0
 8004940:	428b      	cmp	r3, r1
 8004942:	bf04      	itt	eq
 8004944:	6819      	ldreq	r1, [r3, #0]
 8004946:	685b      	ldreq	r3, [r3, #4]
 8004948:	6063      	str	r3, [r4, #4]
 800494a:	bf04      	itt	eq
 800494c:	1809      	addeq	r1, r1, r0
 800494e:	6021      	streq	r1, [r4, #0]
 8004950:	6054      	str	r4, [r2, #4]
 8004952:	e7ca      	b.n	80048ea <_free_r+0x22>
 8004954:	bd38      	pop	{r3, r4, r5, pc}
 8004956:	bf00      	nop
 8004958:	2000030c 	.word	0x2000030c

0800495c <sbrk_aligned>:
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	4e0f      	ldr	r6, [pc, #60]	@ (800499c <sbrk_aligned+0x40>)
 8004960:	460c      	mov	r4, r1
 8004962:	6831      	ldr	r1, [r6, #0]
 8004964:	4605      	mov	r5, r0
 8004966:	b911      	cbnz	r1, 800496e <sbrk_aligned+0x12>
 8004968:	f000 fba6 	bl	80050b8 <_sbrk_r>
 800496c:	6030      	str	r0, [r6, #0]
 800496e:	4621      	mov	r1, r4
 8004970:	4628      	mov	r0, r5
 8004972:	f000 fba1 	bl	80050b8 <_sbrk_r>
 8004976:	1c43      	adds	r3, r0, #1
 8004978:	d103      	bne.n	8004982 <sbrk_aligned+0x26>
 800497a:	f04f 34ff 	mov.w	r4, #4294967295
 800497e:	4620      	mov	r0, r4
 8004980:	bd70      	pop	{r4, r5, r6, pc}
 8004982:	1cc4      	adds	r4, r0, #3
 8004984:	f024 0403 	bic.w	r4, r4, #3
 8004988:	42a0      	cmp	r0, r4
 800498a:	d0f8      	beq.n	800497e <sbrk_aligned+0x22>
 800498c:	1a21      	subs	r1, r4, r0
 800498e:	4628      	mov	r0, r5
 8004990:	f000 fb92 	bl	80050b8 <_sbrk_r>
 8004994:	3001      	adds	r0, #1
 8004996:	d1f2      	bne.n	800497e <sbrk_aligned+0x22>
 8004998:	e7ef      	b.n	800497a <sbrk_aligned+0x1e>
 800499a:	bf00      	nop
 800499c:	20000308 	.word	0x20000308

080049a0 <_malloc_r>:
 80049a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049a4:	1ccd      	adds	r5, r1, #3
 80049a6:	f025 0503 	bic.w	r5, r5, #3
 80049aa:	3508      	adds	r5, #8
 80049ac:	2d0c      	cmp	r5, #12
 80049ae:	bf38      	it	cc
 80049b0:	250c      	movcc	r5, #12
 80049b2:	2d00      	cmp	r5, #0
 80049b4:	4606      	mov	r6, r0
 80049b6:	db01      	blt.n	80049bc <_malloc_r+0x1c>
 80049b8:	42a9      	cmp	r1, r5
 80049ba:	d904      	bls.n	80049c6 <_malloc_r+0x26>
 80049bc:	230c      	movs	r3, #12
 80049be:	6033      	str	r3, [r6, #0]
 80049c0:	2000      	movs	r0, #0
 80049c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a9c <_malloc_r+0xfc>
 80049ca:	f000 f869 	bl	8004aa0 <__malloc_lock>
 80049ce:	f8d8 3000 	ldr.w	r3, [r8]
 80049d2:	461c      	mov	r4, r3
 80049d4:	bb44      	cbnz	r4, 8004a28 <_malloc_r+0x88>
 80049d6:	4629      	mov	r1, r5
 80049d8:	4630      	mov	r0, r6
 80049da:	f7ff ffbf 	bl	800495c <sbrk_aligned>
 80049de:	1c43      	adds	r3, r0, #1
 80049e0:	4604      	mov	r4, r0
 80049e2:	d158      	bne.n	8004a96 <_malloc_r+0xf6>
 80049e4:	f8d8 4000 	ldr.w	r4, [r8]
 80049e8:	4627      	mov	r7, r4
 80049ea:	2f00      	cmp	r7, #0
 80049ec:	d143      	bne.n	8004a76 <_malloc_r+0xd6>
 80049ee:	2c00      	cmp	r4, #0
 80049f0:	d04b      	beq.n	8004a8a <_malloc_r+0xea>
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	4639      	mov	r1, r7
 80049f6:	4630      	mov	r0, r6
 80049f8:	eb04 0903 	add.w	r9, r4, r3
 80049fc:	f000 fb5c 	bl	80050b8 <_sbrk_r>
 8004a00:	4581      	cmp	r9, r0
 8004a02:	d142      	bne.n	8004a8a <_malloc_r+0xea>
 8004a04:	6821      	ldr	r1, [r4, #0]
 8004a06:	1a6d      	subs	r5, r5, r1
 8004a08:	4629      	mov	r1, r5
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	f7ff ffa6 	bl	800495c <sbrk_aligned>
 8004a10:	3001      	adds	r0, #1
 8004a12:	d03a      	beq.n	8004a8a <_malloc_r+0xea>
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	442b      	add	r3, r5
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	bb62      	cbnz	r2, 8004a7c <_malloc_r+0xdc>
 8004a22:	f8c8 7000 	str.w	r7, [r8]
 8004a26:	e00f      	b.n	8004a48 <_malloc_r+0xa8>
 8004a28:	6822      	ldr	r2, [r4, #0]
 8004a2a:	1b52      	subs	r2, r2, r5
 8004a2c:	d420      	bmi.n	8004a70 <_malloc_r+0xd0>
 8004a2e:	2a0b      	cmp	r2, #11
 8004a30:	d917      	bls.n	8004a62 <_malloc_r+0xc2>
 8004a32:	1961      	adds	r1, r4, r5
 8004a34:	42a3      	cmp	r3, r4
 8004a36:	6025      	str	r5, [r4, #0]
 8004a38:	bf18      	it	ne
 8004a3a:	6059      	strne	r1, [r3, #4]
 8004a3c:	6863      	ldr	r3, [r4, #4]
 8004a3e:	bf08      	it	eq
 8004a40:	f8c8 1000 	streq.w	r1, [r8]
 8004a44:	5162      	str	r2, [r4, r5]
 8004a46:	604b      	str	r3, [r1, #4]
 8004a48:	4630      	mov	r0, r6
 8004a4a:	f000 f82f 	bl	8004aac <__malloc_unlock>
 8004a4e:	f104 000b 	add.w	r0, r4, #11
 8004a52:	1d23      	adds	r3, r4, #4
 8004a54:	f020 0007 	bic.w	r0, r0, #7
 8004a58:	1ac2      	subs	r2, r0, r3
 8004a5a:	bf1c      	itt	ne
 8004a5c:	1a1b      	subne	r3, r3, r0
 8004a5e:	50a3      	strne	r3, [r4, r2]
 8004a60:	e7af      	b.n	80049c2 <_malloc_r+0x22>
 8004a62:	6862      	ldr	r2, [r4, #4]
 8004a64:	42a3      	cmp	r3, r4
 8004a66:	bf0c      	ite	eq
 8004a68:	f8c8 2000 	streq.w	r2, [r8]
 8004a6c:	605a      	strne	r2, [r3, #4]
 8004a6e:	e7eb      	b.n	8004a48 <_malloc_r+0xa8>
 8004a70:	4623      	mov	r3, r4
 8004a72:	6864      	ldr	r4, [r4, #4]
 8004a74:	e7ae      	b.n	80049d4 <_malloc_r+0x34>
 8004a76:	463c      	mov	r4, r7
 8004a78:	687f      	ldr	r7, [r7, #4]
 8004a7a:	e7b6      	b.n	80049ea <_malloc_r+0x4a>
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	42a3      	cmp	r3, r4
 8004a82:	d1fb      	bne.n	8004a7c <_malloc_r+0xdc>
 8004a84:	2300      	movs	r3, #0
 8004a86:	6053      	str	r3, [r2, #4]
 8004a88:	e7de      	b.n	8004a48 <_malloc_r+0xa8>
 8004a8a:	230c      	movs	r3, #12
 8004a8c:	6033      	str	r3, [r6, #0]
 8004a8e:	4630      	mov	r0, r6
 8004a90:	f000 f80c 	bl	8004aac <__malloc_unlock>
 8004a94:	e794      	b.n	80049c0 <_malloc_r+0x20>
 8004a96:	6005      	str	r5, [r0, #0]
 8004a98:	e7d6      	b.n	8004a48 <_malloc_r+0xa8>
 8004a9a:	bf00      	nop
 8004a9c:	2000030c 	.word	0x2000030c

08004aa0 <__malloc_lock>:
 8004aa0:	4801      	ldr	r0, [pc, #4]	@ (8004aa8 <__malloc_lock+0x8>)
 8004aa2:	f7ff bf0f 	b.w	80048c4 <__retarget_lock_acquire_recursive>
 8004aa6:	bf00      	nop
 8004aa8:	20000304 	.word	0x20000304

08004aac <__malloc_unlock>:
 8004aac:	4801      	ldr	r0, [pc, #4]	@ (8004ab4 <__malloc_unlock+0x8>)
 8004aae:	f7ff bf0a 	b.w	80048c6 <__retarget_lock_release_recursive>
 8004ab2:	bf00      	nop
 8004ab4:	20000304 	.word	0x20000304

08004ab8 <__ssputs_r>:
 8004ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004abc:	688e      	ldr	r6, [r1, #8]
 8004abe:	461f      	mov	r7, r3
 8004ac0:	42be      	cmp	r6, r7
 8004ac2:	680b      	ldr	r3, [r1, #0]
 8004ac4:	4682      	mov	sl, r0
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	4690      	mov	r8, r2
 8004aca:	d82d      	bhi.n	8004b28 <__ssputs_r+0x70>
 8004acc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ad0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004ad4:	d026      	beq.n	8004b24 <__ssputs_r+0x6c>
 8004ad6:	6965      	ldr	r5, [r4, #20]
 8004ad8:	6909      	ldr	r1, [r1, #16]
 8004ada:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ade:	eba3 0901 	sub.w	r9, r3, r1
 8004ae2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ae6:	1c7b      	adds	r3, r7, #1
 8004ae8:	444b      	add	r3, r9
 8004aea:	106d      	asrs	r5, r5, #1
 8004aec:	429d      	cmp	r5, r3
 8004aee:	bf38      	it	cc
 8004af0:	461d      	movcc	r5, r3
 8004af2:	0553      	lsls	r3, r2, #21
 8004af4:	d527      	bpl.n	8004b46 <__ssputs_r+0x8e>
 8004af6:	4629      	mov	r1, r5
 8004af8:	f7ff ff52 	bl	80049a0 <_malloc_r>
 8004afc:	4606      	mov	r6, r0
 8004afe:	b360      	cbz	r0, 8004b5a <__ssputs_r+0xa2>
 8004b00:	6921      	ldr	r1, [r4, #16]
 8004b02:	464a      	mov	r2, r9
 8004b04:	f000 fae8 	bl	80050d8 <memcpy>
 8004b08:	89a3      	ldrh	r3, [r4, #12]
 8004b0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b12:	81a3      	strh	r3, [r4, #12]
 8004b14:	6126      	str	r6, [r4, #16]
 8004b16:	6165      	str	r5, [r4, #20]
 8004b18:	444e      	add	r6, r9
 8004b1a:	eba5 0509 	sub.w	r5, r5, r9
 8004b1e:	6026      	str	r6, [r4, #0]
 8004b20:	60a5      	str	r5, [r4, #8]
 8004b22:	463e      	mov	r6, r7
 8004b24:	42be      	cmp	r6, r7
 8004b26:	d900      	bls.n	8004b2a <__ssputs_r+0x72>
 8004b28:	463e      	mov	r6, r7
 8004b2a:	6820      	ldr	r0, [r4, #0]
 8004b2c:	4632      	mov	r2, r6
 8004b2e:	4641      	mov	r1, r8
 8004b30:	f000 faa8 	bl	8005084 <memmove>
 8004b34:	68a3      	ldr	r3, [r4, #8]
 8004b36:	1b9b      	subs	r3, r3, r6
 8004b38:	60a3      	str	r3, [r4, #8]
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	4433      	add	r3, r6
 8004b3e:	6023      	str	r3, [r4, #0]
 8004b40:	2000      	movs	r0, #0
 8004b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b46:	462a      	mov	r2, r5
 8004b48:	f000 fad4 	bl	80050f4 <_realloc_r>
 8004b4c:	4606      	mov	r6, r0
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	d1e0      	bne.n	8004b14 <__ssputs_r+0x5c>
 8004b52:	6921      	ldr	r1, [r4, #16]
 8004b54:	4650      	mov	r0, sl
 8004b56:	f7ff feb7 	bl	80048c8 <_free_r>
 8004b5a:	230c      	movs	r3, #12
 8004b5c:	f8ca 3000 	str.w	r3, [sl]
 8004b60:	89a3      	ldrh	r3, [r4, #12]
 8004b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b66:	81a3      	strh	r3, [r4, #12]
 8004b68:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6c:	e7e9      	b.n	8004b42 <__ssputs_r+0x8a>
	...

08004b70 <_svfiprintf_r>:
 8004b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b74:	4698      	mov	r8, r3
 8004b76:	898b      	ldrh	r3, [r1, #12]
 8004b78:	061b      	lsls	r3, r3, #24
 8004b7a:	b09d      	sub	sp, #116	@ 0x74
 8004b7c:	4607      	mov	r7, r0
 8004b7e:	460d      	mov	r5, r1
 8004b80:	4614      	mov	r4, r2
 8004b82:	d510      	bpl.n	8004ba6 <_svfiprintf_r+0x36>
 8004b84:	690b      	ldr	r3, [r1, #16]
 8004b86:	b973      	cbnz	r3, 8004ba6 <_svfiprintf_r+0x36>
 8004b88:	2140      	movs	r1, #64	@ 0x40
 8004b8a:	f7ff ff09 	bl	80049a0 <_malloc_r>
 8004b8e:	6028      	str	r0, [r5, #0]
 8004b90:	6128      	str	r0, [r5, #16]
 8004b92:	b930      	cbnz	r0, 8004ba2 <_svfiprintf_r+0x32>
 8004b94:	230c      	movs	r3, #12
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9c:	b01d      	add	sp, #116	@ 0x74
 8004b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba2:	2340      	movs	r3, #64	@ 0x40
 8004ba4:	616b      	str	r3, [r5, #20]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004baa:	2320      	movs	r3, #32
 8004bac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004bb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bb4:	2330      	movs	r3, #48	@ 0x30
 8004bb6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004d54 <_svfiprintf_r+0x1e4>
 8004bba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004bbe:	f04f 0901 	mov.w	r9, #1
 8004bc2:	4623      	mov	r3, r4
 8004bc4:	469a      	mov	sl, r3
 8004bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bca:	b10a      	cbz	r2, 8004bd0 <_svfiprintf_r+0x60>
 8004bcc:	2a25      	cmp	r2, #37	@ 0x25
 8004bce:	d1f9      	bne.n	8004bc4 <_svfiprintf_r+0x54>
 8004bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8004bd4:	d00b      	beq.n	8004bee <_svfiprintf_r+0x7e>
 8004bd6:	465b      	mov	r3, fp
 8004bd8:	4622      	mov	r2, r4
 8004bda:	4629      	mov	r1, r5
 8004bdc:	4638      	mov	r0, r7
 8004bde:	f7ff ff6b 	bl	8004ab8 <__ssputs_r>
 8004be2:	3001      	adds	r0, #1
 8004be4:	f000 80a7 	beq.w	8004d36 <_svfiprintf_r+0x1c6>
 8004be8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bea:	445a      	add	r2, fp
 8004bec:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bee:	f89a 3000 	ldrb.w	r3, [sl]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 809f 	beq.w	8004d36 <_svfiprintf_r+0x1c6>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c02:	f10a 0a01 	add.w	sl, sl, #1
 8004c06:	9304      	str	r3, [sp, #16]
 8004c08:	9307      	str	r3, [sp, #28]
 8004c0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c10:	4654      	mov	r4, sl
 8004c12:	2205      	movs	r2, #5
 8004c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c18:	484e      	ldr	r0, [pc, #312]	@ (8004d54 <_svfiprintf_r+0x1e4>)
 8004c1a:	f7fb fae9 	bl	80001f0 <memchr>
 8004c1e:	9a04      	ldr	r2, [sp, #16]
 8004c20:	b9d8      	cbnz	r0, 8004c5a <_svfiprintf_r+0xea>
 8004c22:	06d0      	lsls	r0, r2, #27
 8004c24:	bf44      	itt	mi
 8004c26:	2320      	movmi	r3, #32
 8004c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c2c:	0711      	lsls	r1, r2, #28
 8004c2e:	bf44      	itt	mi
 8004c30:	232b      	movmi	r3, #43	@ 0x2b
 8004c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c36:	f89a 3000 	ldrb.w	r3, [sl]
 8004c3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c3c:	d015      	beq.n	8004c6a <_svfiprintf_r+0xfa>
 8004c3e:	9a07      	ldr	r2, [sp, #28]
 8004c40:	4654      	mov	r4, sl
 8004c42:	2000      	movs	r0, #0
 8004c44:	f04f 0c0a 	mov.w	ip, #10
 8004c48:	4621      	mov	r1, r4
 8004c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c4e:	3b30      	subs	r3, #48	@ 0x30
 8004c50:	2b09      	cmp	r3, #9
 8004c52:	d94b      	bls.n	8004cec <_svfiprintf_r+0x17c>
 8004c54:	b1b0      	cbz	r0, 8004c84 <_svfiprintf_r+0x114>
 8004c56:	9207      	str	r2, [sp, #28]
 8004c58:	e014      	b.n	8004c84 <_svfiprintf_r+0x114>
 8004c5a:	eba0 0308 	sub.w	r3, r0, r8
 8004c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8004c62:	4313      	orrs	r3, r2
 8004c64:	9304      	str	r3, [sp, #16]
 8004c66:	46a2      	mov	sl, r4
 8004c68:	e7d2      	b.n	8004c10 <_svfiprintf_r+0xa0>
 8004c6a:	9b03      	ldr	r3, [sp, #12]
 8004c6c:	1d19      	adds	r1, r3, #4
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	9103      	str	r1, [sp, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	bfbb      	ittet	lt
 8004c76:	425b      	neglt	r3, r3
 8004c78:	f042 0202 	orrlt.w	r2, r2, #2
 8004c7c:	9307      	strge	r3, [sp, #28]
 8004c7e:	9307      	strlt	r3, [sp, #28]
 8004c80:	bfb8      	it	lt
 8004c82:	9204      	strlt	r2, [sp, #16]
 8004c84:	7823      	ldrb	r3, [r4, #0]
 8004c86:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c88:	d10a      	bne.n	8004ca0 <_svfiprintf_r+0x130>
 8004c8a:	7863      	ldrb	r3, [r4, #1]
 8004c8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c8e:	d132      	bne.n	8004cf6 <_svfiprintf_r+0x186>
 8004c90:	9b03      	ldr	r3, [sp, #12]
 8004c92:	1d1a      	adds	r2, r3, #4
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	9203      	str	r2, [sp, #12]
 8004c98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c9c:	3402      	adds	r4, #2
 8004c9e:	9305      	str	r3, [sp, #20]
 8004ca0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004d64 <_svfiprintf_r+0x1f4>
 8004ca4:	7821      	ldrb	r1, [r4, #0]
 8004ca6:	2203      	movs	r2, #3
 8004ca8:	4650      	mov	r0, sl
 8004caa:	f7fb faa1 	bl	80001f0 <memchr>
 8004cae:	b138      	cbz	r0, 8004cc0 <_svfiprintf_r+0x150>
 8004cb0:	9b04      	ldr	r3, [sp, #16]
 8004cb2:	eba0 000a 	sub.w	r0, r0, sl
 8004cb6:	2240      	movs	r2, #64	@ 0x40
 8004cb8:	4082      	lsls	r2, r0
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	3401      	adds	r4, #1
 8004cbe:	9304      	str	r3, [sp, #16]
 8004cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cc4:	4824      	ldr	r0, [pc, #144]	@ (8004d58 <_svfiprintf_r+0x1e8>)
 8004cc6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cca:	2206      	movs	r2, #6
 8004ccc:	f7fb fa90 	bl	80001f0 <memchr>
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	d036      	beq.n	8004d42 <_svfiprintf_r+0x1d2>
 8004cd4:	4b21      	ldr	r3, [pc, #132]	@ (8004d5c <_svfiprintf_r+0x1ec>)
 8004cd6:	bb1b      	cbnz	r3, 8004d20 <_svfiprintf_r+0x1b0>
 8004cd8:	9b03      	ldr	r3, [sp, #12]
 8004cda:	3307      	adds	r3, #7
 8004cdc:	f023 0307 	bic.w	r3, r3, #7
 8004ce0:	3308      	adds	r3, #8
 8004ce2:	9303      	str	r3, [sp, #12]
 8004ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ce6:	4433      	add	r3, r6
 8004ce8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cea:	e76a      	b.n	8004bc2 <_svfiprintf_r+0x52>
 8004cec:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cf0:	460c      	mov	r4, r1
 8004cf2:	2001      	movs	r0, #1
 8004cf4:	e7a8      	b.n	8004c48 <_svfiprintf_r+0xd8>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	3401      	adds	r4, #1
 8004cfa:	9305      	str	r3, [sp, #20]
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	f04f 0c0a 	mov.w	ip, #10
 8004d02:	4620      	mov	r0, r4
 8004d04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d08:	3a30      	subs	r2, #48	@ 0x30
 8004d0a:	2a09      	cmp	r2, #9
 8004d0c:	d903      	bls.n	8004d16 <_svfiprintf_r+0x1a6>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0c6      	beq.n	8004ca0 <_svfiprintf_r+0x130>
 8004d12:	9105      	str	r1, [sp, #20]
 8004d14:	e7c4      	b.n	8004ca0 <_svfiprintf_r+0x130>
 8004d16:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d1a:	4604      	mov	r4, r0
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e7f0      	b.n	8004d02 <_svfiprintf_r+0x192>
 8004d20:	ab03      	add	r3, sp, #12
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	462a      	mov	r2, r5
 8004d26:	4b0e      	ldr	r3, [pc, #56]	@ (8004d60 <_svfiprintf_r+0x1f0>)
 8004d28:	a904      	add	r1, sp, #16
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	f3af 8000 	nop.w
 8004d30:	1c42      	adds	r2, r0, #1
 8004d32:	4606      	mov	r6, r0
 8004d34:	d1d6      	bne.n	8004ce4 <_svfiprintf_r+0x174>
 8004d36:	89ab      	ldrh	r3, [r5, #12]
 8004d38:	065b      	lsls	r3, r3, #25
 8004d3a:	f53f af2d 	bmi.w	8004b98 <_svfiprintf_r+0x28>
 8004d3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d40:	e72c      	b.n	8004b9c <_svfiprintf_r+0x2c>
 8004d42:	ab03      	add	r3, sp, #12
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	462a      	mov	r2, r5
 8004d48:	4b05      	ldr	r3, [pc, #20]	@ (8004d60 <_svfiprintf_r+0x1f0>)
 8004d4a:	a904      	add	r1, sp, #16
 8004d4c:	4638      	mov	r0, r7
 8004d4e:	f000 f879 	bl	8004e44 <_printf_i>
 8004d52:	e7ed      	b.n	8004d30 <_svfiprintf_r+0x1c0>
 8004d54:	08005354 	.word	0x08005354
 8004d58:	0800535e 	.word	0x0800535e
 8004d5c:	00000000 	.word	0x00000000
 8004d60:	08004ab9 	.word	0x08004ab9
 8004d64:	0800535a 	.word	0x0800535a

08004d68 <_printf_common>:
 8004d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d6c:	4616      	mov	r6, r2
 8004d6e:	4698      	mov	r8, r3
 8004d70:	688a      	ldr	r2, [r1, #8]
 8004d72:	690b      	ldr	r3, [r1, #16]
 8004d74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	bfb8      	it	lt
 8004d7c:	4613      	movlt	r3, r2
 8004d7e:	6033      	str	r3, [r6, #0]
 8004d80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d84:	4607      	mov	r7, r0
 8004d86:	460c      	mov	r4, r1
 8004d88:	b10a      	cbz	r2, 8004d8e <_printf_common+0x26>
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	6033      	str	r3, [r6, #0]
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	0699      	lsls	r1, r3, #26
 8004d92:	bf42      	ittt	mi
 8004d94:	6833      	ldrmi	r3, [r6, #0]
 8004d96:	3302      	addmi	r3, #2
 8004d98:	6033      	strmi	r3, [r6, #0]
 8004d9a:	6825      	ldr	r5, [r4, #0]
 8004d9c:	f015 0506 	ands.w	r5, r5, #6
 8004da0:	d106      	bne.n	8004db0 <_printf_common+0x48>
 8004da2:	f104 0a19 	add.w	sl, r4, #25
 8004da6:	68e3      	ldr	r3, [r4, #12]
 8004da8:	6832      	ldr	r2, [r6, #0]
 8004daa:	1a9b      	subs	r3, r3, r2
 8004dac:	42ab      	cmp	r3, r5
 8004dae:	dc26      	bgt.n	8004dfe <_printf_common+0x96>
 8004db0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004db4:	6822      	ldr	r2, [r4, #0]
 8004db6:	3b00      	subs	r3, #0
 8004db8:	bf18      	it	ne
 8004dba:	2301      	movne	r3, #1
 8004dbc:	0692      	lsls	r2, r2, #26
 8004dbe:	d42b      	bmi.n	8004e18 <_printf_common+0xb0>
 8004dc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004dc4:	4641      	mov	r1, r8
 8004dc6:	4638      	mov	r0, r7
 8004dc8:	47c8      	blx	r9
 8004dca:	3001      	adds	r0, #1
 8004dcc:	d01e      	beq.n	8004e0c <_printf_common+0xa4>
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	6922      	ldr	r2, [r4, #16]
 8004dd2:	f003 0306 	and.w	r3, r3, #6
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	bf02      	ittt	eq
 8004dda:	68e5      	ldreq	r5, [r4, #12]
 8004ddc:	6833      	ldreq	r3, [r6, #0]
 8004dde:	1aed      	subeq	r5, r5, r3
 8004de0:	68a3      	ldr	r3, [r4, #8]
 8004de2:	bf0c      	ite	eq
 8004de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004de8:	2500      	movne	r5, #0
 8004dea:	4293      	cmp	r3, r2
 8004dec:	bfc4      	itt	gt
 8004dee:	1a9b      	subgt	r3, r3, r2
 8004df0:	18ed      	addgt	r5, r5, r3
 8004df2:	2600      	movs	r6, #0
 8004df4:	341a      	adds	r4, #26
 8004df6:	42b5      	cmp	r5, r6
 8004df8:	d11a      	bne.n	8004e30 <_printf_common+0xc8>
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	e008      	b.n	8004e10 <_printf_common+0xa8>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	4652      	mov	r2, sl
 8004e02:	4641      	mov	r1, r8
 8004e04:	4638      	mov	r0, r7
 8004e06:	47c8      	blx	r9
 8004e08:	3001      	adds	r0, #1
 8004e0a:	d103      	bne.n	8004e14 <_printf_common+0xac>
 8004e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e14:	3501      	adds	r5, #1
 8004e16:	e7c6      	b.n	8004da6 <_printf_common+0x3e>
 8004e18:	18e1      	adds	r1, r4, r3
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	2030      	movs	r0, #48	@ 0x30
 8004e1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e22:	4422      	add	r2, r4
 8004e24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e2c:	3302      	adds	r3, #2
 8004e2e:	e7c7      	b.n	8004dc0 <_printf_common+0x58>
 8004e30:	2301      	movs	r3, #1
 8004e32:	4622      	mov	r2, r4
 8004e34:	4641      	mov	r1, r8
 8004e36:	4638      	mov	r0, r7
 8004e38:	47c8      	blx	r9
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	d0e6      	beq.n	8004e0c <_printf_common+0xa4>
 8004e3e:	3601      	adds	r6, #1
 8004e40:	e7d9      	b.n	8004df6 <_printf_common+0x8e>
	...

08004e44 <_printf_i>:
 8004e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e48:	7e0f      	ldrb	r7, [r1, #24]
 8004e4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e4c:	2f78      	cmp	r7, #120	@ 0x78
 8004e4e:	4691      	mov	r9, r2
 8004e50:	4680      	mov	r8, r0
 8004e52:	460c      	mov	r4, r1
 8004e54:	469a      	mov	sl, r3
 8004e56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e5a:	d807      	bhi.n	8004e6c <_printf_i+0x28>
 8004e5c:	2f62      	cmp	r7, #98	@ 0x62
 8004e5e:	d80a      	bhi.n	8004e76 <_printf_i+0x32>
 8004e60:	2f00      	cmp	r7, #0
 8004e62:	f000 80d2 	beq.w	800500a <_printf_i+0x1c6>
 8004e66:	2f58      	cmp	r7, #88	@ 0x58
 8004e68:	f000 80b9 	beq.w	8004fde <_printf_i+0x19a>
 8004e6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e74:	e03a      	b.n	8004eec <_printf_i+0xa8>
 8004e76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e7a:	2b15      	cmp	r3, #21
 8004e7c:	d8f6      	bhi.n	8004e6c <_printf_i+0x28>
 8004e7e:	a101      	add	r1, pc, #4	@ (adr r1, 8004e84 <_printf_i+0x40>)
 8004e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e84:	08004edd 	.word	0x08004edd
 8004e88:	08004ef1 	.word	0x08004ef1
 8004e8c:	08004e6d 	.word	0x08004e6d
 8004e90:	08004e6d 	.word	0x08004e6d
 8004e94:	08004e6d 	.word	0x08004e6d
 8004e98:	08004e6d 	.word	0x08004e6d
 8004e9c:	08004ef1 	.word	0x08004ef1
 8004ea0:	08004e6d 	.word	0x08004e6d
 8004ea4:	08004e6d 	.word	0x08004e6d
 8004ea8:	08004e6d 	.word	0x08004e6d
 8004eac:	08004e6d 	.word	0x08004e6d
 8004eb0:	08004ff1 	.word	0x08004ff1
 8004eb4:	08004f1b 	.word	0x08004f1b
 8004eb8:	08004fab 	.word	0x08004fab
 8004ebc:	08004e6d 	.word	0x08004e6d
 8004ec0:	08004e6d 	.word	0x08004e6d
 8004ec4:	08005013 	.word	0x08005013
 8004ec8:	08004e6d 	.word	0x08004e6d
 8004ecc:	08004f1b 	.word	0x08004f1b
 8004ed0:	08004e6d 	.word	0x08004e6d
 8004ed4:	08004e6d 	.word	0x08004e6d
 8004ed8:	08004fb3 	.word	0x08004fb3
 8004edc:	6833      	ldr	r3, [r6, #0]
 8004ede:	1d1a      	adds	r2, r3, #4
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6032      	str	r2, [r6, #0]
 8004ee4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ee8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004eec:	2301      	movs	r3, #1
 8004eee:	e09d      	b.n	800502c <_printf_i+0x1e8>
 8004ef0:	6833      	ldr	r3, [r6, #0]
 8004ef2:	6820      	ldr	r0, [r4, #0]
 8004ef4:	1d19      	adds	r1, r3, #4
 8004ef6:	6031      	str	r1, [r6, #0]
 8004ef8:	0606      	lsls	r6, r0, #24
 8004efa:	d501      	bpl.n	8004f00 <_printf_i+0xbc>
 8004efc:	681d      	ldr	r5, [r3, #0]
 8004efe:	e003      	b.n	8004f08 <_printf_i+0xc4>
 8004f00:	0645      	lsls	r5, r0, #25
 8004f02:	d5fb      	bpl.n	8004efc <_printf_i+0xb8>
 8004f04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f08:	2d00      	cmp	r5, #0
 8004f0a:	da03      	bge.n	8004f14 <_printf_i+0xd0>
 8004f0c:	232d      	movs	r3, #45	@ 0x2d
 8004f0e:	426d      	negs	r5, r5
 8004f10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f14:	4859      	ldr	r0, [pc, #356]	@ (800507c <_printf_i+0x238>)
 8004f16:	230a      	movs	r3, #10
 8004f18:	e011      	b.n	8004f3e <_printf_i+0xfa>
 8004f1a:	6821      	ldr	r1, [r4, #0]
 8004f1c:	6833      	ldr	r3, [r6, #0]
 8004f1e:	0608      	lsls	r0, r1, #24
 8004f20:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f24:	d402      	bmi.n	8004f2c <_printf_i+0xe8>
 8004f26:	0649      	lsls	r1, r1, #25
 8004f28:	bf48      	it	mi
 8004f2a:	b2ad      	uxthmi	r5, r5
 8004f2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f2e:	4853      	ldr	r0, [pc, #332]	@ (800507c <_printf_i+0x238>)
 8004f30:	6033      	str	r3, [r6, #0]
 8004f32:	bf14      	ite	ne
 8004f34:	230a      	movne	r3, #10
 8004f36:	2308      	moveq	r3, #8
 8004f38:	2100      	movs	r1, #0
 8004f3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f3e:	6866      	ldr	r6, [r4, #4]
 8004f40:	60a6      	str	r6, [r4, #8]
 8004f42:	2e00      	cmp	r6, #0
 8004f44:	bfa2      	ittt	ge
 8004f46:	6821      	ldrge	r1, [r4, #0]
 8004f48:	f021 0104 	bicge.w	r1, r1, #4
 8004f4c:	6021      	strge	r1, [r4, #0]
 8004f4e:	b90d      	cbnz	r5, 8004f54 <_printf_i+0x110>
 8004f50:	2e00      	cmp	r6, #0
 8004f52:	d04b      	beq.n	8004fec <_printf_i+0x1a8>
 8004f54:	4616      	mov	r6, r2
 8004f56:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f5a:	fb03 5711 	mls	r7, r3, r1, r5
 8004f5e:	5dc7      	ldrb	r7, [r0, r7]
 8004f60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f64:	462f      	mov	r7, r5
 8004f66:	42bb      	cmp	r3, r7
 8004f68:	460d      	mov	r5, r1
 8004f6a:	d9f4      	bls.n	8004f56 <_printf_i+0x112>
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d10b      	bne.n	8004f88 <_printf_i+0x144>
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	07df      	lsls	r7, r3, #31
 8004f74:	d508      	bpl.n	8004f88 <_printf_i+0x144>
 8004f76:	6923      	ldr	r3, [r4, #16]
 8004f78:	6861      	ldr	r1, [r4, #4]
 8004f7a:	4299      	cmp	r1, r3
 8004f7c:	bfde      	ittt	le
 8004f7e:	2330      	movle	r3, #48	@ 0x30
 8004f80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f88:	1b92      	subs	r2, r2, r6
 8004f8a:	6122      	str	r2, [r4, #16]
 8004f8c:	f8cd a000 	str.w	sl, [sp]
 8004f90:	464b      	mov	r3, r9
 8004f92:	aa03      	add	r2, sp, #12
 8004f94:	4621      	mov	r1, r4
 8004f96:	4640      	mov	r0, r8
 8004f98:	f7ff fee6 	bl	8004d68 <_printf_common>
 8004f9c:	3001      	adds	r0, #1
 8004f9e:	d14a      	bne.n	8005036 <_printf_i+0x1f2>
 8004fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa4:	b004      	add	sp, #16
 8004fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	f043 0320 	orr.w	r3, r3, #32
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	4833      	ldr	r0, [pc, #204]	@ (8005080 <_printf_i+0x23c>)
 8004fb4:	2778      	movs	r7, #120	@ 0x78
 8004fb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fba:	6823      	ldr	r3, [r4, #0]
 8004fbc:	6831      	ldr	r1, [r6, #0]
 8004fbe:	061f      	lsls	r7, r3, #24
 8004fc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fc4:	d402      	bmi.n	8004fcc <_printf_i+0x188>
 8004fc6:	065f      	lsls	r7, r3, #25
 8004fc8:	bf48      	it	mi
 8004fca:	b2ad      	uxthmi	r5, r5
 8004fcc:	6031      	str	r1, [r6, #0]
 8004fce:	07d9      	lsls	r1, r3, #31
 8004fd0:	bf44      	itt	mi
 8004fd2:	f043 0320 	orrmi.w	r3, r3, #32
 8004fd6:	6023      	strmi	r3, [r4, #0]
 8004fd8:	b11d      	cbz	r5, 8004fe2 <_printf_i+0x19e>
 8004fda:	2310      	movs	r3, #16
 8004fdc:	e7ac      	b.n	8004f38 <_printf_i+0xf4>
 8004fde:	4827      	ldr	r0, [pc, #156]	@ (800507c <_printf_i+0x238>)
 8004fe0:	e7e9      	b.n	8004fb6 <_printf_i+0x172>
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	f023 0320 	bic.w	r3, r3, #32
 8004fe8:	6023      	str	r3, [r4, #0]
 8004fea:	e7f6      	b.n	8004fda <_printf_i+0x196>
 8004fec:	4616      	mov	r6, r2
 8004fee:	e7bd      	b.n	8004f6c <_printf_i+0x128>
 8004ff0:	6833      	ldr	r3, [r6, #0]
 8004ff2:	6825      	ldr	r5, [r4, #0]
 8004ff4:	6961      	ldr	r1, [r4, #20]
 8004ff6:	1d18      	adds	r0, r3, #4
 8004ff8:	6030      	str	r0, [r6, #0]
 8004ffa:	062e      	lsls	r6, r5, #24
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	d501      	bpl.n	8005004 <_printf_i+0x1c0>
 8005000:	6019      	str	r1, [r3, #0]
 8005002:	e002      	b.n	800500a <_printf_i+0x1c6>
 8005004:	0668      	lsls	r0, r5, #25
 8005006:	d5fb      	bpl.n	8005000 <_printf_i+0x1bc>
 8005008:	8019      	strh	r1, [r3, #0]
 800500a:	2300      	movs	r3, #0
 800500c:	6123      	str	r3, [r4, #16]
 800500e:	4616      	mov	r6, r2
 8005010:	e7bc      	b.n	8004f8c <_printf_i+0x148>
 8005012:	6833      	ldr	r3, [r6, #0]
 8005014:	1d1a      	adds	r2, r3, #4
 8005016:	6032      	str	r2, [r6, #0]
 8005018:	681e      	ldr	r6, [r3, #0]
 800501a:	6862      	ldr	r2, [r4, #4]
 800501c:	2100      	movs	r1, #0
 800501e:	4630      	mov	r0, r6
 8005020:	f7fb f8e6 	bl	80001f0 <memchr>
 8005024:	b108      	cbz	r0, 800502a <_printf_i+0x1e6>
 8005026:	1b80      	subs	r0, r0, r6
 8005028:	6060      	str	r0, [r4, #4]
 800502a:	6863      	ldr	r3, [r4, #4]
 800502c:	6123      	str	r3, [r4, #16]
 800502e:	2300      	movs	r3, #0
 8005030:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005034:	e7aa      	b.n	8004f8c <_printf_i+0x148>
 8005036:	6923      	ldr	r3, [r4, #16]
 8005038:	4632      	mov	r2, r6
 800503a:	4649      	mov	r1, r9
 800503c:	4640      	mov	r0, r8
 800503e:	47d0      	blx	sl
 8005040:	3001      	adds	r0, #1
 8005042:	d0ad      	beq.n	8004fa0 <_printf_i+0x15c>
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	079b      	lsls	r3, r3, #30
 8005048:	d413      	bmi.n	8005072 <_printf_i+0x22e>
 800504a:	68e0      	ldr	r0, [r4, #12]
 800504c:	9b03      	ldr	r3, [sp, #12]
 800504e:	4298      	cmp	r0, r3
 8005050:	bfb8      	it	lt
 8005052:	4618      	movlt	r0, r3
 8005054:	e7a6      	b.n	8004fa4 <_printf_i+0x160>
 8005056:	2301      	movs	r3, #1
 8005058:	4632      	mov	r2, r6
 800505a:	4649      	mov	r1, r9
 800505c:	4640      	mov	r0, r8
 800505e:	47d0      	blx	sl
 8005060:	3001      	adds	r0, #1
 8005062:	d09d      	beq.n	8004fa0 <_printf_i+0x15c>
 8005064:	3501      	adds	r5, #1
 8005066:	68e3      	ldr	r3, [r4, #12]
 8005068:	9903      	ldr	r1, [sp, #12]
 800506a:	1a5b      	subs	r3, r3, r1
 800506c:	42ab      	cmp	r3, r5
 800506e:	dcf2      	bgt.n	8005056 <_printf_i+0x212>
 8005070:	e7eb      	b.n	800504a <_printf_i+0x206>
 8005072:	2500      	movs	r5, #0
 8005074:	f104 0619 	add.w	r6, r4, #25
 8005078:	e7f5      	b.n	8005066 <_printf_i+0x222>
 800507a:	bf00      	nop
 800507c:	08005365 	.word	0x08005365
 8005080:	08005376 	.word	0x08005376

08005084 <memmove>:
 8005084:	4288      	cmp	r0, r1
 8005086:	b510      	push	{r4, lr}
 8005088:	eb01 0402 	add.w	r4, r1, r2
 800508c:	d902      	bls.n	8005094 <memmove+0x10>
 800508e:	4284      	cmp	r4, r0
 8005090:	4623      	mov	r3, r4
 8005092:	d807      	bhi.n	80050a4 <memmove+0x20>
 8005094:	1e43      	subs	r3, r0, #1
 8005096:	42a1      	cmp	r1, r4
 8005098:	d008      	beq.n	80050ac <memmove+0x28>
 800509a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800509e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050a2:	e7f8      	b.n	8005096 <memmove+0x12>
 80050a4:	4402      	add	r2, r0
 80050a6:	4601      	mov	r1, r0
 80050a8:	428a      	cmp	r2, r1
 80050aa:	d100      	bne.n	80050ae <memmove+0x2a>
 80050ac:	bd10      	pop	{r4, pc}
 80050ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050b6:	e7f7      	b.n	80050a8 <memmove+0x24>

080050b8 <_sbrk_r>:
 80050b8:	b538      	push	{r3, r4, r5, lr}
 80050ba:	4d06      	ldr	r5, [pc, #24]	@ (80050d4 <_sbrk_r+0x1c>)
 80050bc:	2300      	movs	r3, #0
 80050be:	4604      	mov	r4, r0
 80050c0:	4608      	mov	r0, r1
 80050c2:	602b      	str	r3, [r5, #0]
 80050c4:	f7fc fbc0 	bl	8001848 <_sbrk>
 80050c8:	1c43      	adds	r3, r0, #1
 80050ca:	d102      	bne.n	80050d2 <_sbrk_r+0x1a>
 80050cc:	682b      	ldr	r3, [r5, #0]
 80050ce:	b103      	cbz	r3, 80050d2 <_sbrk_r+0x1a>
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	bd38      	pop	{r3, r4, r5, pc}
 80050d4:	20000300 	.word	0x20000300

080050d8 <memcpy>:
 80050d8:	440a      	add	r2, r1
 80050da:	4291      	cmp	r1, r2
 80050dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80050e0:	d100      	bne.n	80050e4 <memcpy+0xc>
 80050e2:	4770      	bx	lr
 80050e4:	b510      	push	{r4, lr}
 80050e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050ee:	4291      	cmp	r1, r2
 80050f0:	d1f9      	bne.n	80050e6 <memcpy+0xe>
 80050f2:	bd10      	pop	{r4, pc}

080050f4 <_realloc_r>:
 80050f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050f8:	4680      	mov	r8, r0
 80050fa:	4615      	mov	r5, r2
 80050fc:	460c      	mov	r4, r1
 80050fe:	b921      	cbnz	r1, 800510a <_realloc_r+0x16>
 8005100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005104:	4611      	mov	r1, r2
 8005106:	f7ff bc4b 	b.w	80049a0 <_malloc_r>
 800510a:	b92a      	cbnz	r2, 8005118 <_realloc_r+0x24>
 800510c:	f7ff fbdc 	bl	80048c8 <_free_r>
 8005110:	2400      	movs	r4, #0
 8005112:	4620      	mov	r0, r4
 8005114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005118:	f000 f81a 	bl	8005150 <_malloc_usable_size_r>
 800511c:	4285      	cmp	r5, r0
 800511e:	4606      	mov	r6, r0
 8005120:	d802      	bhi.n	8005128 <_realloc_r+0x34>
 8005122:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005126:	d8f4      	bhi.n	8005112 <_realloc_r+0x1e>
 8005128:	4629      	mov	r1, r5
 800512a:	4640      	mov	r0, r8
 800512c:	f7ff fc38 	bl	80049a0 <_malloc_r>
 8005130:	4607      	mov	r7, r0
 8005132:	2800      	cmp	r0, #0
 8005134:	d0ec      	beq.n	8005110 <_realloc_r+0x1c>
 8005136:	42b5      	cmp	r5, r6
 8005138:	462a      	mov	r2, r5
 800513a:	4621      	mov	r1, r4
 800513c:	bf28      	it	cs
 800513e:	4632      	movcs	r2, r6
 8005140:	f7ff ffca 	bl	80050d8 <memcpy>
 8005144:	4621      	mov	r1, r4
 8005146:	4640      	mov	r0, r8
 8005148:	f7ff fbbe 	bl	80048c8 <_free_r>
 800514c:	463c      	mov	r4, r7
 800514e:	e7e0      	b.n	8005112 <_realloc_r+0x1e>

08005150 <_malloc_usable_size_r>:
 8005150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005154:	1f18      	subs	r0, r3, #4
 8005156:	2b00      	cmp	r3, #0
 8005158:	bfbc      	itt	lt
 800515a:	580b      	ldrlt	r3, [r1, r0]
 800515c:	18c0      	addlt	r0, r0, r3
 800515e:	4770      	bx	lr

08005160 <_init>:
 8005160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005162:	bf00      	nop
 8005164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005166:	bc08      	pop	{r3}
 8005168:	469e      	mov	lr, r3
 800516a:	4770      	bx	lr

0800516c <_fini>:
 800516c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516e:	bf00      	nop
 8005170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005172:	bc08      	pop	{r3}
 8005174:	469e      	mov	lr, r3
 8005176:	4770      	bx	lr
