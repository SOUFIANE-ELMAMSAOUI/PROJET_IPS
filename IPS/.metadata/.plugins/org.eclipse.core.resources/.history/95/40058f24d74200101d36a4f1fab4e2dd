#include "main.h"
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>

#define CIRCULAR_BUFFER_MAX 60

typedef volatile struct CircularBuffer {
	char data[CIRCULAR_BUFFER_MAX];
	int  write_ptr;
	int  read_ptr;
} CircularBuffer;

static CircularBuffer reception_buffer = {
	.write_ptr=0,
	.read_ptr=0
};

#define DATA_ARRAY_SIZE 100

typedef volatile struct DataArray {
	int values[DATA_ARRAY_SIZE][3];
	int current_index;
	int total_size;
} DataArray;

#define ADC_BUFFER_SIZE 1
#define TRANSMISSION_BUFFER_SIZE 1000
#define RECEPTION_BUFFER_SIZE 1
#define SERVO_MIN_ANGLE 0
#define SERVO_MAX_ANGLE 180
#define PWM_MIN_VALUE 1000
#define PWM_MAX_VALUE 6500
#define GRAVITY_CONSTANT 9.81
#define AVERAGING_SAMPLES 16

uint16_t measured_voltage;
uint16_t adc_readings[AVERAGING_SAMPLES];
char reception_data[RECEPTION_BUFFER_SIZE];
int operation_mode = 2;
int servo_position = 0;
char parsed_commands[3][33];
char uart_message[100];

DataArray communication_buffer = {
		.current_index = 0,
		.total_size = DATA_ARRAY_SIZE
};

ADC_HandleTypeDef hadc1;
TIM_HandleTypeDef htim2;
UART_HandleTypeDef huart2;

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
float convert_angle_to_pwm(int target_angle);
void process_received_command(const char* command_string);
int convert_force_to_servo_angle(float applied_force);
float convert_voltage_to_weight(float input_voltage);
static void insert_char_to_buffer(char received_char);
static void reset_reception_buffer(void);
uint16_t get_averaged_adc_reading(void);

int main(void)
{
  HAL_Init();
  SystemClock_Config();

  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_USART2_UART_Init();
  MX_TIM2_Init();

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
  HAL_UART_Receive_IT(&huart2, (uint8_t *)reception_data, 1);

  float sensor_voltage;
  float calculated_mass;
  float applied_force;
  int voltage_integer, mass_integer, force_integer, automatic_angle;
  float pwm_duty_cycle;
  uint16_t raw_adc_value;

  strcpy(uart_message, "=== Systeme demarre - Mode diagnostic ===\r\n");
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);

  sprintf(uart_message, "Valeur TIM2->CCR2 initiale: %lu\r\n", (unsigned long)TIM2->CCR2);
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);

  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
  HAL_Delay(10);

  TIM2->PSC = 41;
  TIM2->ARR = 19999;
  TIM2->CCR2 = 1500;

  sprintf(uart_message, "Config manuelle: PSC=%lu, ARR=%lu, CCR2=%lu\r\n",
         (unsigned long)TIM2->PSC, (unsigned long)TIM2->ARR, (unsigned long)TIM2->CCR2);
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);

  TIM2->CCER |= TIM_CCER_CC2E;
  TIM2->CR1 |= TIM_CR1_CEN;

  strcpy(uart_message, "=== Test des positions du servomoteur ===\r\n");
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);

  for(int test_position = 1000; test_position <= 2000; test_position += 200) {
      TIM2->CCR2 = test_position;

      sprintf(uart_message, "Position test: %d (CCR2=%lu)\r\n",
              test_position, (unsigned long)TIM2->CCR2);
      HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);

      HAL_Delay(1000);
  }

  TIM2->CCR2 = 1500;
  HAL_Delay(1000);

  while (1) {
      raw_adc_value = get_averaged_adc_reading();
      sensor_voltage = ((float)raw_adc_value * 3.3f) / 4095.0f;

      sprintf(uart_message, "DIAG: Raw ADC=%d, Voltage=%d.%03d V\r\n",
              raw_adc_value, (int)sensor_voltage, (int)((sensor_voltage-(int)sensor_voltage)*1000));
      HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);

      calculated_mass = convert_voltage_to_weight(sensor_voltage);
      applied_force = (calculated_mass * 0.001f) * GRAVITY_CONSTANT;

      voltage_integer = (int)(sensor_voltage * 1000);
      mass_integer = (int)calculated_mass;
      force_integer = (int)(applied_force * 1000);

      sprintf(uart_message, "V:%d.%03d\r\nM:%d\r\nF:%d.%03d\r\n",
              voltage_integer/1000, voltage_integer%1000, mass_integer, force_integer/1000, force_integer%1000);
      HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);

      if (operation_mode == 1) {
          pwm_duty_cycle = convert_angle_to_pwm(servo_position);
          TIM2->CCR2 = (uint32_t)pwm_duty_cycle;

          sprintf(uart_message, "CCR2 après mise à jour: %lu\r\n", (unsigned long)TIM2->CCR2);
          HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);

          sprintf(uart_message, "A:%d\r\n", servo_position);
          HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);

          sprintf(uart_message, "SERVO MANUEL: Angle=%d, CCR=%lu\r\n",
                  servo_position, (unsigned long)TIM2->CCR2);
          HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);
      }
      else if (operation_mode == 2) {
          automatic_angle = convert_force_to_servo_angle(applied_force);
          pwm_duty_cycle = convert_angle_to_pwm(automatic_angle);
          TIM2->CCR2 = (uint32_t)pwm_duty_cycle;

          sprintf(uart_message, "CCR2 après mise à jour: %lu\r\n", (unsigned long)TIM2->CCR2);
          HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);

          sprintf(uart_message, "A:%d\r\n", automatic_angle);
          HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);

          sprintf(uart_message, "SERVO AUTO: V=%d.%03d M=%d F=%d.%03d A=%d CCR=%lu\r\n",
                 voltage_integer/1000, voltage_integer%1000, mass_integer, force_integer/1000, force_integer%1000,
                 automatic_angle, (unsigned long)TIM2->CCR2);
          HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);
      }

      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
      HAL_Delay(500);
  }
}

uint16_t get_averaged_adc_reading(void) {
    uint32_t total_sum = 0;
    uint16_t sample_counter;

    for(sample_counter = 0; sample_counter < AVERAGING_SAMPLES; sample_counter++) {
        HAL_ADC_Start(&hadc1);
        HAL_ADC_PollForConversion(&hadc1, 10);
        total_sum += HAL_ADC_GetValue(&hadc1);
        HAL_ADC_Stop(&hadc1);
        HAL_Delay(1);
    }

    return (uint16_t)(total_sum / AVERAGING_SAMPLES);
}

float convert_voltage_to_weight(float input_voltage) {
    float weight_result;
    float conversion_factor = 188.68f;
    weight_result = conversion_factor * input_voltage;
    char debug_output[50];

    sprintf(debug_output, "CONV: %d.%03d V -> %d g\r\n",
            (int)input_voltage, (int)((input_voltage-(int)input_voltage)*1000), (int)weight_result);
    HAL_UART_Transmit(&huart2, (uint8_t*)debug_output, strlen(debug_output), HAL_MAX_DELAY);

    return weight_result;
}

int convert_force_to_servo_angle(float applied_force) {
    float minimum_force = 0.0f;
    float maximum_force = 5.886f;

    if (applied_force < minimum_force) applied_force = minimum_force;
    if (applied_force > maximum_force) applied_force = maximum_force;

    float resulting_angle = SERVO_MIN_ANGLE + ((applied_force - minimum_force) / (maximum_force - minimum_force)) * (SERVO_MAX_ANGLE - SERVO_MIN_ANGLE);
    return (int)resulting_angle;
}

float convert_angle_to_pwm(int target_angle) {
    if (target_angle < SERVO_MIN_ANGLE) target_angle = SERVO_MIN_ANGLE;
    if (target_angle > SERVO_MAX_ANGLE) target_angle = SERVO_MAX_ANGLE;
    float pwm_value = PWM_MIN_VALUE + (((float)(target_angle - SERVO_MIN_ANGLE) / (SERVO_MAX_ANGLE - SERVO_MIN_ANGLE)) * (PWM_MAX_VALUE - PWM_MIN_VALUE));
    return pwm_value;
}

void process_received_command(const char* command_string) {
    char temporary_data[CIRCULAR_BUFFER_MAX];
    strcpy(temporary_data, command_string);

    char *command_token = strtok(temporary_data, ",");
    int token_index = 0;
    while (command_token && token_index < 3) {
        strcpy(parsed_commands[token_index], command_token);
        token_index++;
        command_token = strtok(NULL, ",");
    }

    if (token_index > 0) {
        operation_mode = atoi(parsed_commands[0]);
    }

    if (token_index > 1) {
        int desired_angle = atoi(parsed_commands[1]);
        if (desired_angle >= SERVO_MIN_ANGLE && desired_angle <= SERVO_MAX_ANGLE) {
            servo_position = desired_angle;
        }
    }

    sprintf(uart_message, "ACK:M%d,A%d\r\n", operation_mode, servo_position);
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_message, strlen(uart_message), HAL_MAX_DELAY);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
    HAL_UART_Receive_IT(&huart2, (uint8_t *)reception_data, 1);
    char received_character = (char)reception_data[0];

    if (received_character == 'e') {
        reception_buffer.data[reception_buffer.write_ptr] = '\0';
        process_received_command(reception_buffer.data);
        reset_reception_buffer();
    } else {
        insert_char_to_buffer(received_character);
    }
}

static void insert_char_to_buffer(char received_char) {
    if ((reception_buffer.write_ptr + 1) % CIRCULAR_BUFFER_MAX != reception_buffer.read_ptr) {
        reception_buffer.data[reception_buffer.write_ptr] = received_char;
        reception_buffer.write_ptr = (reception_buffer.write_ptr + 1) % CIRCULAR_BUFFER_MAX;
    }
}

static void reset_reception_buffer(void) {
    reception_buffer.write_ptr = 0;
    reception_buffer.read_ptr = 0;
}
